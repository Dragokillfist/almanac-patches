[manifest]
version = "1.0.0"
dump_lua = true
priority = -1

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''local new_colour = G.C.WHITE'''
position = "after"
payload = '''level = type(level) == "number" and level or level:to_number()'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''if not no_astronomy and amount > 0 then
		if Jen.hv('astronomy', 9) then
			amount = amount * 5
		elseif Jen.hv('astronomy', 8) then
			amount = amount * 2
		end
	end'''
position = "at"
payload = '''if not no_astronomy and to_big(amount) > to_big(0) then
		if Jen.hv('astronomy', 9) then
			amount = amount * 5
		elseif Jen.hv('astronomy', 8) then
			amount = amount * 2
		end
	end'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''if amount > 0 then
		if #SMODS.find_card('j_jen_guilduryn') > 0 and hand ~= jl.favhand() then
			for k, v in ipairs(G.jokers.cards) do
				if v.gc and v:gc().key == 'j_jen_guilduryn' then
					card_eval_status_text(v, 'extra', nil, nil, nil, {message = 'Redirected!', colour = G.C.MONEY})
					break
				end
			end
			hand = jl.favhand()
			if not instant then
				jl.th(hand)
			end
		end
	end'''
position = "at"
payload = '''if to_big(amount) > to_big(0) then
		if #SMODS.find_card('j_jen_guilduryn') > 0 and hand ~= jl.favhand() then
			for k, v in ipairs(G.jokers.cards) do
				if v.gc and v:gc().key == 'j_jen_guilduryn' then
					card_eval_status_text(v, 'extra', nil, nil, nil, {message = 'Redirected!', colour = G.C.MONEY})
					break
				end
			end
			hand = jl.favhand()
			if not instant then
				jl.th(hand)
			end
		end
	end'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''if amount > 0 then
		add_malice(25 * amount)
	end
	if jl.invalid_number(number_format(G.GAME.hands[hand].level)) then
		G.GAME.hands[hand].level = 1e300
		if not instant then
			update_hand_text({sound = 'button', volume = 0.7, pitch = 0.8, delay = 0.3}, {level=maxfloat})
			delay(0.3)
		end
	end'''
position = "at"
payload = '''if to_big(amount) > to_big(0) then
        add_malice(25 * amount)
    end
    if jl.invalid_number(number_format(G.GAME.hands[hand].level)) then
        G.GAME.hands[hand].level = 1e300
        if not instant then
            update_hand_text({sound = 'button', volume = 0.7, pitch = 0.8, delay = 0.3}, {level=maxfloat})
            delay(0.3)
        end
    end'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''if amount < 0 and Jen.hv('astronomy', 11) and not no_astronomy then
		local refund = math.abs(amount) / 4
		local fav = jl.favhand()
		if Jen.config.verbose_astronomicon then jl.th(fav) end
		fastlv(card, fav, not Jen.config.verbose_astronomicon, refund, true)
	end
	if amount > 0 and Jen.hv('astronomy', 12) and not no_astronomy then
		local dividend = amount / 10
		local fav = jl.favhand()
		if Jen.config.verbose_astronomicon then jl.th(fav) end
		fastlv(card, fav, not Jen.config.verbose_astronomicon, dividend, true)
	end
	if Jen.hv('astronomy', 13) and amount >= 1 and not no_astronomy_omega then
		local pos = jl.handpos(hand)
		--local edi = ((card or {}).edition or {}).key or 'e_base'
		--if edi == 'e_negative' then edi = 'e_base' end
		--if not a13_sum[edi] then a13_sum[edi] = {} end
		if G.handlist[pos + 1] then
			--if not astronomyomega_cumulative[G.handlist[pos + 1]] then astronomyomega_cumulative[G.handlist[pos + 1]] = 0 end
			if Jen.config.verbose_astronomicon_omega then jl.th(G.handlist[pos + 1]) end
			fastlv(card, G.handlist[pos + 1], not Jen.config.verbose_astronomicon_omega, amount / 2, true)
		end
	end'''
position = "at"
payload = '''if to_big(amount) < to_big(0) and Jen.hv('astronomy', 11) and not no_astronomy then
        local refund = math.abs(amount) / 4
        local fav = jl.favhand()
        if Jen.config.verbose_astronomicon then jl.th(fav) end
        fastlv(card, fav, not Jen.config.verbose_astronomicon, refund, true)
    end
    if to_big(amount) > to_big(0) and Jen.hv('astronomy', 12) and not no_astronomy then
        local dividend = amount / 10
        local fav = jl.favhand()
        if Jen.config.verbose_astronomicon then jl.th(fav) end
        fastlv(card, fav, not Jen.config.verbose_astronomicon, dividend, true)
    end
	if Jen.hv('astronomy', 13) and to_big(amount) >= to_big(1) and not no_astronomy_omega then
		local pos = jl.handpos(hand)
		--local edi = ((card or {}).edition or {}).key or 'e_base'
		--if edi == 'e_negative' then edi = 'e_base' end
		--if not a13_sum[edi] then a13_sum[edi] = {} end
		if G.handlist[pos + 1] then
			--if not astronomyomega_cumulative[G.handlist[pos + 1]] then astronomyomega_cumulative[G.handlist[pos + 1]] = 0 end
			if Jen.config.verbose_astronomicon_omega then jl.th(G.handlist[pos + 1]) end
			fastlv(card, G.handlist[pos + 1], not Jen.config.verbose_astronomicon_omega, amount / 2, true)
		end
	end'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''if fusion then
			local can_afford = (Jen.fusions[fusion].cost or 0) <= G.GAME.dollars
			if can_afford and not card.already_notified then
				play_sound('jen_done')
				card:juice_up(0.5, 0.5)
				card.already_notified = true
			elseif not can_afford then
				card.already_notified = false
			end
			card.fusion_ready = can_afford
			card.target_fusion = fusion
			card.fusion_details = fusion .. ' : $' .. number_format(Jen.fusions[fusion].cost or 0)
		elseif #G.jokers.highlighted + math.max(0, #G.consumeables.highlighted - 1) > 0 then
			card.fusion_details = 'No recipe matches selected cards'
			card.already_notified = false
		end'''
position = "at"
payload = '''if fusion then
            local can_afford = to_big(Jen.fusions[fusion].cost or 0) <= to_big(G.GAME.dollars)
            if can_afford and not card.already_notified then
                play_sound('jen_done')
                card:juice_up(0.5, 0.5)
                card.already_notified = true
            elseif not can_afford then
                card.already_notified = false
            end
            card.fusion_ready = can_afford
            card.target_fusion = fusion
            card.fusion_details = fusion .. ' : $' .. number_format(Jen.fusions[fusion].cost or 0)
        elseif #G.jokers.highlighted + math.max(0, #G.consumeables.highlighted - 1) > 0 then
            card.fusion_details = 'No recipe matches selected cards'
            card.already_notified = false
        end'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''	if v.level > 1 then
				levels = levels + math.max(0, v.level - 1)
				level_up_hand(nil, k, true, -v.level + 1, true, true)
			end'''
position = "at"
payload = '''    if to_big(v.level) > to_big(1) then
                levels = levels + math.max(0, v.level - 1)
                level_up_hand(nil, k, true, -v.level + 1, true, true)
            end'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''if G.GAME.hands[fav].level > 0 then
			if hands.backhand then
				card:do_jen_astronomy(hands.backhand, mod)
				jl.th(hands.backhand)
				level_up_hand(card, hands.backhand, nil, mod)
			end
			if hands.forehand then
				card:do_jen_astronomy(hands.forehand, mod)
				jl.th(hands.forehand)
				level_up_hand(card, hands.forehand, nil, mod)
			end
		end'''
position = "at"
payload = '''if to_big(G.GAME.hands[fav].level) > to_big(0) then
            if hands.backhand then
                card:do_jen_astronomy(hands.backhand, mod)
                jl.th(hands.backhand)
                level_up_hand(card, hands.backhand, nil, mod)
            end
            if hands.forehand then
                card:do_jen_astronomy(hands.forehand, mod)
                jl.th(hands.forehand)
                level_up_hand(card, hands.forehand, nil, mod)
            end
        end'''
match_indent = true




[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''if identical > 0 then
				play_sound_q('button')
				jl.hm('x' .. identical)
				delay(3)
				for i = 1, identical do
					cumulative = cumulative + ((2 ^ (i-1))/4)
					play_sound_q('button', 1.1)
					jl.hcm('+' .. number_format(cumulative), i == identical and '' or ('x' .. (identical - i)))
					delay(0.25)
				end
				delay(2.75)
				update_operator_display()
			else
				if cumulative <= 0 then jl.hcm('Nope!', 'Nope!') else jl.hc('Nope!') end
				play_sound_q('timpani')
				delay(3)
				update_operator_display()
			end'''
position = "at"
payload = '''if to_big(identical) > to_big(0) then
				play_sound_q('button')
				jl.hm('x' .. identical)
				delay(3)
				for i = 1, identical do
					cumulative = cumulative + ((2 ^ (i-1))/4)
					play_sound_q('button', 1.1)
					jl.hcm('+' .. number_format(cumulative), i == identical and '' or ('x' .. (identical - i)))
					delay(0.25)
				end
				delay(2.75)
				update_operator_display()
			else
				if to_big(cumulative) <= to_big(0) then jl.hcm('Nope!', 'Nope!') else jl.hc('Nope!') end
				play_sound_q('timpani')
				delay(3)
				update_operator_display()
			end'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''for k, v in pairs(G.GAME.hands) do
			if v.level > max_level then
				hands = {[k] = true}
				max_level = v.level
			elseif v.level == max_level then
				hands[k] = true
			end
		end'''
position = "at"
payload = '''for k, v in pairs(G.GAME.hands) do
			if to_big(v.level) > to_big(max_level) then
				hands = {[k] = true}
				max_level = v.level
			elseif to_big(v.level) == to_big(max_level) then
				hands[k] = true
			end
		end'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''for k, v in pairs(G.GAME.hands) do
				if current_levels[k] > max_level then
					hands = {[k] = true}
					max_level = v.level
				elseif current_levels[k] == max_level then
					hands[k] = true
				end
			end'''
position = "at"
payload = '''for k, v in pairs(G.GAME.hands) do
				if current_levels[k] > to_big(max_level) then
					hands = {[k] = true}
					max_level = v.level
				elseif current_levels[k] == to_big(max_level) then
					hands[k] = true
				end
			end'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''use = function(self, card, area, copier)
		local fav = jl.favhand()
		local hands = jl.adjacenthands(fav)
		local lv = 0
		local levels_siphoned = 0
		if hands.backhand then
			if G.GAME.hands[hands.backhand].level > 0 then
				jl.th(hands.backhand)
				lv = G.GAME.hands[hands.backhand].level / 2
				level_up_hand(card, hands.backhand, nil, -lv)
				levels_siphoned = lv
			end
		end
		if hands.forehand then
			if G.GAME.hands[hands.forehand].level > 0 then
				jl.th(hands.forehand)
				lv = G.GAME.hands[hands.forehand].level / 2
				level_up_hand(card, hands.forehand, nil, -lv)
				levels_siphoned = levels_siphoned + lv
			end
		end
		card:do_jen_astronomy(fav, levels_siphoned)
		jl.th(fav)
		level_up_hand(card, fav, nil, levels_siphoned)
		jl.ch()
	end,
	bulk_use = function(self, card, area, copier, number)
		local fav = jl.favhand()
		local hands = jl.adjacenthands(fav)
		local lv = 0
		local levels_siphoned = 0
		local divisor = 1 / (2^(number-1))
		if hands.backhand then
			if G.GAME.hands[hands.backhand].level > 0 then
				jl.th(hands.backhand)
				lv = (G.GAME.hands[hands.backhand].level/2) / divisor
				level_up_hand(card, hands.backhand, nil, -lv)
				levels_siphoned = lv
			end
		end
		if hands.forehand then
			if G.GAME.hands[hands.forehand].level > 0 then
				jl.th(hands.forehand)
				lv = (G.GAME.hands[hands.forehand].level/2) / divisor
				level_up_hand(card, hands.forehand, nil, -lv)
				levels_siphoned = levels_siphoned + lv
			end
		end
		card:do_jen_astronomy(fav, levels_siphoned)
		jl.th(fav)
		level_up_hand(card, fav, nil, levels_siphoned)
		jl.ch()
	end'''
position = "at"
payload = '''use = function(self, card, area, copier)
		local fav = jl.favhand()
		local hands = jl.adjacenthands(fav)
		local lv = 0
		local levels_siphoned = 0
		if hands.backhand then
			if G.GAME.hands[hands.backhand].level > to_big(0) then
				jl.th(hands.backhand)
				lv = G.GAME.hands[hands.backhand].level / 2
				level_up_hand(card, hands.backhand, nil, -lv)
				levels_siphoned = lv
			end
		end
		if hands.forehand then
			if G.GAME.hands[hands.forehand].level > to_big(0) then
				jl.th(hands.forehand)
				lv = G.GAME.hands[hands.forehand].level / 2
				level_up_hand(card, hands.forehand, nil, -lv)
				levels_siphoned = levels_siphoned + lv
			end
		end
		card:do_jen_astronomy(fav, levels_siphoned)
		jl.th(fav)
		level_up_hand(card, fav, nil, levels_siphoned)
		jl.ch()
	end,
	bulk_use = function(self, card, area, copier, number)
		local fav = jl.favhand()
		local hands = jl.adjacenthands(fav)
		local lv = 0
		local levels_siphoned = 0
		local divisor = 1 / (2^(number-1))
		if hands.backhand then
			if G.GAME.hands[hands.backhand].level > to_big(0) then
				jl.th(hands.backhand)
				lv = (G.GAME.hands[hands.backhand].level/2) / divisor
				level_up_hand(card, hands.backhand, nil, -lv)
				levels_siphoned = lv
			end
		end
		if hands.forehand then
			if G.GAME.hands[hands.forehand].level > to_big(0) then
				jl.th(hands.forehand)
				lv = (G.GAME.hands[hands.forehand].level/2) / divisor
				level_up_hand(card, hands.forehand, nil, -lv)
				levels_siphoned = levels_siphoned + lv
			end
		end
		card:do_jen_astronomy(fav, levels_siphoned)
		jl.th(fav)
		level_up_hand(card, fav, nil, levels_siphoned)
		jl.ch()
	end'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''use = function(self, card, area, copier)
			local fav = jl.favhand()
			local hands = jl.adjacenthands(fav)
			local lv = 0
			local levels_siphoned = 0
			if hands.backhand then
				if G.GAME.hands[hands.backhand].level > to_big(0) then
					jl.th(hands.backhand)
					lv = G.GAME.hands[hands.backhand].level / 2
					level_up_hand(card, hands.backhand, nil, -lv)
					levels_siphoned = lv
				end
			end
			if hands.forehand then
				if G.GAME.hands[hands.forehand].level > to_big(0) then
					jl.th(hands.forehand)
					lv = G.GAME.hands[hands.forehand].level / 2
					level_up_hand(card, hands.forehand, nil, -lv)
					levels_siphoned = levels_siphoned + lv
				end
			end
			card:do_jen_astronomy(fav, levels_siphoned)
			jl.th(fav)
			level_up_hand(card, fav, nil, levels_siphoned)
			jl.ch()
		end,
		bulk_use = function(self, card, area, copier, number)
			local fav = jl.favhand()
			local hands = jl.adjacenthands(fav)
			local lv = 0
			local levels_siphoned = 0
			local divisor = 1 / (2^(number-1))
			if hands.backhand then
				if G.GAME.hands[hands.backhand].level > to_big(0) then
					jl.th(hands.backhand)
					lv = (G.GAME.hands[hands.backhand].level/2) / divisor
					level_up_hand(card, hands.backhand, nil, -lv)
					levels_siphoned = lv
				end
			end'''
position = "at"
payload = '''use = function(self, card, area, copier)
			local fav = jl.favhand()
			local hands = jl.adjacenthands(fav)
			local lv = 0
			local levels_siphoned = 0
			if hands.backhand then
				if to_big(G.GAME.hands[hands.backhand].level) > to_big(0) then
					jl.th(hands.backhand)
					lv = G.GAME.hands[hands.backhand].level / 2
					level_up_hand(card, hands.backhand, nil, -lv)
					levels_siphoned = lv
				end
			end
			if hands.forehand then
				if to_big(G.GAME.hands[hands.forehand].level) > to_big(0) then
					jl.th(hands.forehand)
					lv = G.GAME.hands[hands.forehand].level / 2
					level_up_hand(card, hands.forehand, nil, -lv)
					levels_siphoned = levels_siphoned + lv
				end
			end
			card:do_jen_astronomy(fav, levels_siphoned)
			jl.th(fav)
			level_up_hand(card, fav, nil, levels_siphoned)
			jl.ch()
		end,
		bulk_use = function(self, card, area, copier, number)
			local fav = jl.favhand()
			local hands = jl.adjacenthands(fav)
			local lv = 0
			local levels_siphoned = 0
			local divisor = 1 / (2^(number-1))
			if hands.backhand then
				if to_big(G.GAME.hands[hands.backhand].level) > to_big(0) then
					jl.th(hands.backhand)
					lv = (G.GAME.hands[hands.backhand].level/2) / divisor
					level_up_hand(card, hands.backhand, nil, -lv)
					levels_siphoned = lv
				end
			end'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''function Card:draw(layer)
	local CEN = self.gc and self:gc()
	if CEN then
		if (self.facing or '') == 'front' then
			if self.config then
				local should_scare = not CEN.cant_scare and ((Jen.gods() and CEN.fusable) or Jen.sinister)
				local should_scare2 = not CEN.cant_scare and ((Jen.gods() and CEN.fusable) or Jen.dramatic)
				if self.edition then
					if self.edition.jen_bismuth then
						self.edition.retriggers = bismuth_retriggers()
					end
				end
				if CEN.key == 'j_jen_dandy' and math.random(800) == 1 then
					self.dandy_glitch = math.random(10, 80)
					if self.children then
						if self.children.center then
							self.children.center:set_sprite_pos({x = 0, y = 1})
						end
						if self.children.floating_sprite then
							self.children.floating_sprite:set_sprite_pos({x = 1, y = 1})
						end
					end
				elseif self.dandy_glitch then
					if self.dandy_glitch <= 1 then
						if self.children then
							if self.children.center then
								self.children.center:set_sprite_pos({x = 0, y = 0})
							end
							if self.children.floating_sprite then
								self.children.floating_sprite:set_sprite_pos({x = 1, y = 0})
							end
						end
						self.dandy_glitch = nil
					else
						self.dandy_glitch = self.dandy_glitch - 1
					end
				end
				if not CEN.update and self.children.floating_sprite then
					if ((CEN.drama and should_scare2) or (CEN.sinis and should_scare)) and (CEN.sinis or CEN.drama) and not self.in_drama_state then
						self.in_drama_state = true
						self.children.floating_sprite:set_sprite_pos(CEN.drama or CEN.sinis)
					elseif not ((CEN.drama and should_scare2) or (CEN.sinis and should_scare)) and self.in_drama_state then
						self.in_drama_state = nil
						self.children.floating_sprite:set_sprite_pos(CEN.soul_pos)
					end
				end
				if self.in_drama_state then
					self:juice_up(0, math.random()/(Jen.dramatic and 3 or 6))
				end
				if self.area and next(self.area) then
					if self.ability and CEN.permaeternal and not self.ability.eternal and G.jokers and self.area == G.jokers then
						self.ability.eternal = true
					end
					if CEN.key == 'c_cry_pointer' and G.hand and self.area == G.hand and not self.lolnocryptidingpointerforyou then
						self.lolnocryptidingpointerforyou = true
						self:destroy()
						local pointer = create_card('Code', G.consumeables, nil, nil, nil, nil, 'c_cry_pointer', 'fuck_cryptiding_pointer_because_there_is_no_need_for_a_budget_creative_mode_please_come_the_fuck_on')
						pointer.no_omega = true
						pointer:add_to_deck()
						G.consumeables:emplace(pointer)
					end
				end
				if CEN.gloss then
					if CEN.gloss_contrast then
						for i = 1, CEN.gloss_contrast do
							self.children.center:draw_shader(type(CEN.gloss) == 'string' and CEN.gloss or 'voucher', nil, self.ARGS.send_to_shader)
						end
					else
						self.children.center:draw_shader(type(CEN.gloss) == 'string' and CEN.gloss or 'voucher', nil, self.ARGS.send_to_shader)
					end
				end
				if (self.added_to_deck or (self.area and self.area == G.hand)) and not self.edition then
					if not CEN.ignore_kudaai and Jen.kudaai_active and (CEN.set ~= 'Booster' or self.area == G.consumeables) and not CEN.cannot_edition then
						self:set_edition({[random_editions[pseudorandom('kudaai_edition', 1, #random_editions)]] = true}, true)
					end
				end
				if Jen.luke_active and self.ability and CEN.key ~= 'j_jen_hunter' and CEN.key ~= 'j_jen_luke' and CEN.set ~= 'jen_jokerability' then
					self.ability.cry_rigged = true
				end
			end
		else
			if CEN.key == 'c_cry_pointer' and G.hand and self.area == G.hand and not self.lolnocryptidingpointerforyou then
				self.lolnocryptidingpointerforyou = true
				self:destroy()
				local pointer = create_card('Code', G.consumeables, nil, nil, nil, nil, 'c_cry_pointer', 'fuck_cryptiding_pointer_because_there_is_no_need_for_a_budget_creative_mode_please_come_the_fuck_on')
				pointer.no_omega = true
				pointer:add_to_deck()
				G.consumeables:emplace(pointer)
			end
		end
	end
	CEN = nil
    card_draw_ref(self, layer)
end'''
position = "at"
payload = '''function Card:draw(layer)
	if (self.facing or '') == 'front' then
		if self.config then
			if self.edition then
				if self.edition.jen_bismuth then
					self.edition.retriggers = bismuth_retriggers()
				end
			end
			if Jen.sinister and G.hand then
				if (self.highlighted and (self.area or {}) == G.hand) or Jen.dramatic then
					self:juice_up(0, math.random()/4)
				end
			end
			if self.gc and self:gc() then
				local CEN = self:gc()
				if CEN.key == 'j_jen_dandy' and math.random(800) == 1 then
					self.dandy_glitch = math.random(10, 80)
					if self.children then
						if self.children.center then
							self.children.center:set_sprite_pos({x = 0, y = 1})
						end
						if self.children.floating_sprite then
							self.children.floating_sprite:set_sprite_pos({x = 1, y = 1})
						end
					end
				elseif self.dandy_glitch then
					if self.dandy_glitch <= 1 then
						if self.children then
							if self.children.center then
								self.children.center:set_sprite_pos({x = 0, y = 0})
							end
							if self.children.floating_sprite then
								self.children.floating_sprite:set_sprite_pos({x = 1, y = 0})
							end
						end
						self.dandy_glitch = nil
					else
						self.dandy_glitch = self.dandy_glitch - 1
					end
				end
				if not CEN.update and self.children.floating_sprite then
					if (CEN.drama and Jen.dramatic or Jen.sinister) and (CEN.sinis or CEN.drama) and not self.in_drama_state then
						self.in_drama_state = true
						self.children.floating_sprite:set_sprite_pos(CEN.drama or CEN.senis)
					elseif not Jen.sinister and self.in_drama_state then
						self.in_drama_state = nil
						self.children.floating_sprite:set_sprite_pos(CEN.soul_pos)
					end
				end
				if self.in_drama_state then
					self:juice_up(0, math.random()/4)
				end
				if self.area and next(self.area) then
					if self.ability and CEN.permaeternal and not self.ability.eternal and G.jokers and self.area == G.jokers then
						self.ability.eternal = true
					end
					if CEN.key == 'c_cry_pointer' and G.hand and self.area == G.hand and not self.lolnocryptidingpointerforyou then
						self.lolnocryptidingpointerforyou = true
						self:destroy()
						local pointer = create_card('Code', G.consumeables, nil, nil, nil, nil, 'c_cry_pointer', 'fuck_cryptiding_pointer_because_there_is_no_need_for_a_budget_creative_mode_please_come_the_fuck_on')
						pointer.no_omega = true
						pointer:add_to_deck()
						G.consumeables:emplace(pointer)
					end
				end
				if CEN.gloss then
					if CEN.gloss_contrast then
						for i = 1, CEN.gloss_contrast do
							self.children.center:draw_shader(type(CEN.gloss) == 'string' and CEN.gloss or 'voucher', nil, self.ARGS.send_to_shader)
						end
					else
						self.children.center:draw_shader(type(CEN.gloss) == 'string' and CEN.gloss or 'voucher', nil, self.ARGS.send_to_shader)
					end
				end
				if (self.added_to_deck or (self.area and self.area == G.hand)) and not self.edition then
					if Jen.kudaai_active and (CEN.set ~= 'Booster' or self.area == G.consumeables) and not CEN.cannot_edition then
						self:set_edition({[random_editions[pseudorandom('kudaai_edition', 1, #random_editions)]] = true}, true)
					end
				end
				if Jen.luke_active and self.ability and CEN.key ~= 'j_jen_hunter' and CEN.key ~= 'j_jen_luke' and CEN.set ~= 'jen_jokerability' then
					self.ability.cry_rigged = true
				end
				CEN = nil
			end
		end
	end
    card_draw_ref(self, layer)
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''SMODS.Joker {
	key = 'maxie',
	loc_txt = {
		name = '{C:edition}Maxie',
		text = maxie_desc
	},
	pos = { x = 0, y = 0 },
	soul_pos = { x = 1, y = 0 },
	drama = { x = 2, y = 0 },
	cost = 250,
	rarity = 'jen_wondrous',
	wee_incompatible = true,
    loc_vars = function(self, info_queue, center)
		local quoteset = Jen.dramatic and 'drama' or Jen.gods() and 'gods' or 'normal'
        return {vars = {maxie_quotes[quoteset][math.random(#maxie_quotes[quoteset])]}}
    end,
	misc_badge = {
		colour = G.C.almanac,
		text_colour = G.C.CRY_BLOSSOM,
		text = {
			'Disciple of Kosmos',
			'Maxie'
		}
	},
	unique = true,
	unlocked = true,
	discovered = true,
	blueprint_compat = false,
	eternal_compat = true,
	perishable_compat = false,
	atlas = 'jenmaxie',
	in_pool = function()
		return #SMODS.find_card('j_jen_charred') <= 0
	end,
    calculate = function(self, card, context)
		if jl.njr(context) and context.using_consumeable and context.consumeable and context.consumeable.gc and jl.bf(context.consumeable:gc().key, maxie_consumables) then
			local quota = (context.consumeable:getEvalQty())*2
			local isnegative = (context.consumeable.edition or {}).negative
			if not isnegative then
				card:speak('+' .. quota .. ' Boosters', G.C.DARK_EDITION)
				card:speak(maxie_quotes.trigger, G.C.DARK_EDITION)
				for i = 1, quota do
					G.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.2/quota, func = function()
						if card then
							card:juice_up(0.8, 0.5)
							local duplicate = create_card('Booster', G.consumeables, nil, nil, nil, nil, k, 'maxie_pack')
							if duplicate.gc and duplicate:gc().set ~= 'Booster' then
								duplicate:set_ability(jl.rnd('maxie_booster_equilibrium', nil, G.P_CENTER_POOLS.Booster), true, nil)
								duplicate:set_cost()
							end
							duplicate:add_to_deck()
							G.consumeables:emplace(duplicate)
						end
					return true end }))
					if i <= quota/2 and jl.chance('maxie_voucherchance', 10, true) then
						card:speak('+Voucher', G.C.EDITION)
						card:speak(maxie_quotes.trigger, G.C.EDITION)
						G.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.2/quota, func = function()
							if card then
								card:juice_up(0.8, 0.5)
								local duplicate = create_card('Voucher', G.consumeables, nil, nil, nil, nil, k, 'maxie_voucher')
								if duplicate.gc and duplicate:gc().set ~= 'Voucher' then
									duplicate:set_ability(jl.rnd('maxie_voucher_equilibrium', nil, G.P_CENTER_POOLS.Voucher), true, nil)
									duplicate:set_cost()
								end
								duplicate:add_to_deck()
								G.consumeables:emplace(duplicate)
							end
						return true end }))
					end
				end
			end
			return nil, true
		end
	end
}'''
position = "after"
payload = '''

--[[
SMODS.Joker {
	key = 'lugia',
	loc_txt = {
		name = 'Lugia',
		text = {
			'When {C:attention}selecting a Blind{},',
			'add a {C:attention}random playing ("CCD") Voucher{} to your deck',
			'{C:attention}Scoring said Voucher{} will {C:attention}add{} it to consumable tray',
			' ',
			'{C:inactive,s:1,E:1}Momosan really wanted this one.',
			'{C:dark_edition,s:0.7,E:2}Face art by : jenwalter666',
			'{C:cry_exotic,s:0.7,E:2}Origin : Pokémon'
		}
	},
	pos = { x = 0, y = 0 },
	soul_pos = { x = 1, y = 0 },
	cost = 50,
	rarity = 'cry_exotic',
	misc_badge = {
		colour = G.C.almanac,
		text_colour = G.C.CRY_BLOSSOM,
		text = {
			'Disciple of Kosmos',
			'MomosanJr'
		}
	},
	unlocked = true,
	discovered = true,
	unique = true,
	eternal_compat = true,
	perishable_compat = false,
	atlas = 'jenlugia',
    calculate = function(self, card, context)
		if not context.blueprint and jl.njr(context) and context.setting_blind then
			card:speak('+CCD Voucher')
			local voucher = create_playing_card(nil, G.play, nil, nil, {G.C.jen_RGB})
			jl.rd(0.25)
			Q(function()
				play_sound('card1')
				voucher:juice_up(0.3, 0.3)
				voucher:flip()
				return true
			end)
			jl.rd(0.25)
			Q(function()
				play_sound('card1', 0.9)
				voucher:set_ability(jl.rnd('jen_lugia', nil, G.P_CENTER_POOLS.Voucher), true, nil)
				voucher:juice_up(0.3, 0.3)
				voucher:flip()
				return true
			end)
			jl.rd(1)
			Q(function()
				play_sound('card1', 1.1)
				voucher:add_to_deck()
				G.play:remove_card(voucher)
				G.deck:emplace(voucher)
				return true
			end)
			Q(function()
				playing_card_joker_effects({voucher})
			return true end)
		end
	end
}
--]]'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''
		shop_size_buff = 3,
		shop_voucher_count_buff = 2,
		shop_booster_pack_count_buff = 2,
		consumable_slot_count_buff = 18,
		chess_cards = true,
		verbose_astronomicon = false,
		verbose_astronomicon_omega = false,
		mana_cost = 25,
		HQ_vanillashaders = true,
		malice_base = 3000,
		malice_increase = 1.25,
		omega_chance = 300,
		soul_omega_mod = 5,
		wee_sizemod = 1.5,
		safer_kosmos = false,
		kosmos_safety_threshold = 100,
		ante_threshold = 20,
		ante_pow10 = 100,
		ante_pow10_2 = 250,
		ante_pow10_3 = 500,
		ante_pow10_4 = 1000,
		ante_exponentiate = 50,
		ante_tetrate = 2500,
		ante_pentate = 5000,
		ante_polytate = 10000,
		polytate_factor = 1000,
		polytate_decrement = 1,
		scalar_base = 1,
		scalar_increment = .13,
		scalar_additivedivisor = 50,
		scalar_exponent = 1,
		straddle = {
			enabled = true,
			acceleration = true,
			skip_animation = false,
			backwards_mod = 2,
			progress_min = 3,
			progress_max = 7,
			progress_increment = 10
		},
		blind_scalar = {
		},'''
position = "at"
payload = '''
		shop_size_buff = 3,
		shop_voucher_count_buff = 2,
		shop_booster_pack_count_buff = 2,
		consumable_slot_count_buff = 18,
		chess_cards = true,
		verbose_astronomicon = false,
		verbose_astronomicon_omega = false,
		mana_cost = 25,
		HQ_vanillashaders = true,
		malice_base = 3000,
		malice_increase = 1.25,
		omega_chance = 300,
		soul_omega_mod = 5,
		wee_sizemod = 1.5,
		safer_kosmos = false,
		kosmos_safety_threshold = 100,
		ante_threshold = 20,
		ante_pow10 = 100,
		ante_pow10_2 = 250,
		ante_pow10_3 = 500,
		ante_pow10_4 = 1000,
		ante_exponentiate = 50,
		ante_tetrate = 2500,
		ante_pentate = 5000,
		ante_polytate = 10000,
		polytate_factor = 1000,
		polytate_decrement = 1,
		scalar_base = 1,
		scalar_increment = .13,
		scalar_additivedivisor = 50,
		scalar_exponent = 1,
		straddle = {
			enabled = true,
			acceleration = true,
			skip_animation = true,
			backwards_mod = 2,
			progress_min = 3,
			progress_max = 7,
			progress_increment = 10
		},
		blind_scalar = {
		},'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''function ease_dollars(mod, instant, force_update)
	if (G.GAME.dollars + mod ~= G.GAME.dollars and math.abs(mod) > (G.GAME.dollars / 1e6)) or force_update then
		edr(mod,instant)
		local should_clamp = jl.invalid_number(number_format(G.GAME.dollars)) or G.GAME.dollars > 1e100 or G.GAME.dollars < -1e100
		if should_clamp then
			G.GAME.dollars = jl.invalid_number(number_format(G.GAME.dollars)) and 1e100 or math.min(math.max(G.GAME.dollars, -1e100), 1e100)
			ease_dollars(0, true, true)
		end
	end
end'''
position = "at"
payload = '''function ease_dollars(mod, instant, force_update)
	if to_big((G.GAME.dollars + mod ~= G.GAME.dollars and math.abs(mod))) > to_big((G.GAME.dollars / 1e6)) or force_update then
		edr(mod,instant)
		local should_clamp = jl.invalid_number(number_format(G.GAME.dollars)) or to_big(G.GAME.dollars) > to_big(1e100) or to_big(G.GAME.dollars) < to_big(-1e100)
		if should_clamp then
			G.GAME.dollars = jl.invalid_number(number_format(G.GAME.dollars)) and 1e100 or math.min(math.max(G.GAME.dollars, -1e100), 1e100)
			ease_dollars(0, true, true)
		end
	end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''cry_bonusvouchermod(Jen.config.shop_voucher_count_buff)'''
position = "at"
payload = '''SMODS.change_voucher_limit(Jen.config.shop_voucher_count_buff)'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''				change_blind_size(bsize * cry_log_random(pseudoseed('err91_randomisesize' .. i), 0.873, 1.265))'''
position = "at"
payload = '''				change_blind_size(bsize * Cryptid.log_random(pseudoseed('err91_randomisesize' .. i), 0.873, 1.265))'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''		cry_misprintize(card, {min = modifier, max = modifier}, nil, true)'''
position = "at"
payload = '''		Cryptid.misprintize(card, {min = modifier, max = modifier}, nil, true)'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''		cry_misprintize(self, tbl, nil, true)'''
position = "at"
payload = '''		Cryptid.misprintize(self, tbl, nil, true)'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''		cry_misprintize(card, {min = 1/modifier, max = 1/modifier}, nil, true)'''
position = "at"
payload = '''		Cryptid.misprintize(card, {min = 1/modifier, max = 1/modifier}, nil, true)'''
match_indent = true