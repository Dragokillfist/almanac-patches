[manifest]
version = "1.0.0"
dump_lua = true
priority = -1

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''SMODS.Joker {
	key = 'saint',
	loc_txt = {
		name = 'The Saint',
		text = {
			'{C:spectral}Gateway{} will {C:attention}not destroy Jokers{} when used',
			'After using {C:attention}' .. tostring(max_karma) .. ' {C:spectral}Gateways{}, {C:jen_RGB}attune{} this Joker',
			'{C:inactive,s:1.5}[{C:attention,s:1.5}#1#{C:inactive,s:1.5}/' .. tostring(max_karma) .. ']',
			faceart('jenwalter666'),
			origin('Rain World')
		}
	},
	config = {extra = {karma = 0}},
	pos = { x = 0, y = 0 },
	soul_pos = { x = 1, y = 0 },
	cost = 20,
	rarity = 4,
	unlocked = true,
	discovered = true,
	immutable = true,
	blueprint_compat = false,
	eternal_compat = true,
	perishable_compat = false,
	wee_incompatible = true,
	atlas = 'jensaint',
    loc_vars = function(self, info_queue, center)
        return {vars = {center.ability.extra.karma}}
    end,
	calculate = function(self, card, context)
        if not context.blueprint and jl.njr(context) and context.using_consumeable and context.consumeable and context.consumeable:gc().key == 'c_cry_gateway' then
			local quota = context.consumeable:getEvalQty()
			card.ability.extra.karma = card.ability.extra.karma + quota
			card_eval_status_text(card, 'extra', nil, nil, nil, {message = '+' .. quota .. ' Karma', colour = G.C.PALE_GREEN})
			card_eval_status_text(card, 'extra', nil, nil, nil, {message = (tostring(card.ability.extra.karma) .. ' / ' .. tostring(max_karma)), colour = G.C.GREEN})
			if card.ability.extra.karma >= max_karma then
				card_status_text(card, '!!!', nil, 0.05*card.T.h, G.C.DARK_EDITION, 0.6, 0.6, 2, 2, 'bm', 'jen_enlightened')
				G.E_MANAGER:add_event(Event({
					delay = 0.1,
					func = function()
						card:flip()
						play_sound('card1')
						return true
					end
				}))
				G.E_MANAGER:add_event(Event({
					delay = 1,
					func = function()
						card:flip()
						card:juice_up(1, 1)
						play_sound('card1')
						card:set_ability(G.P_CENTERS['j_jen_saint_attuned'])
						return true
					end
				}))
			end
        end
	end
}

SMODS.Joker {
	key = 'saint_attuned',
	loc_txt = {
		name = 'The Saint {C:jen_RGB}(Attuned)',
		text = {
			'{C:spectral}Gateway{} will {C:attention}not destroy Jokers{} when used',
			'{C:cry_ascendant}Yawetag{} also has {C:attention}no negative effect{} when used',
			'{X:black,C:red,s:3}^^^#1#{C:purple} Chips & Mult',
			faceart('jenwalter666'),
			origin('Rain World')
		}
	},
	config = {extra = {ascension = 3}},
	pos = { x = 0, y = 0 },
	soul_pos = { x = 2, y = 0 },
	cost = 100,
	rarity = 'jen_transcendent',
	unlocked = true,
	discovered = true,
	no_doe = true,
	immutable = true,
	blueprint_compat = true,
	eternal_compat = true,
	perishable_compat = false,
	atlas = 'jensaint',
    loc_vars = function(self, info_queue, center)
        return {vars = {center.ability.extra.ascension}}
    end,
	calculate = function(self, card, context)
		if context.cardarea == G.jokers and not context.before and not context.after then
			return {
				message = '^^^' .. card.ability.extra.ascension .. ' Chips & Mult',
				EEEmult_mod = card.ability.extra.ascension,
				EEEchip_mod = card.ability.extra.ascension,
				colour = G.C.BLACK,
				card = card
			}, true
		end
	end
}'''
position = "at"
payload = '''SMODS.Joker {
	key = 'saint',
	loc_txt = {
		name = 'The Saint',
		text = {
			'{C:spectral}Gateway{} will {C:attention}not destroy Jokers{} when used',
			'After using {C:attention}' .. tostring(max_karma) .. ' {C:spectral}Gateways{}, {C:jen_RGB}attune{} this Joker',
			'{C:inactive,s:1.5}[{C:attention,s:1.5}#1#{C:inactive,s:1.5}/' .. tostring(max_karma) .. ']',
			'{C:dark_edition,s:0.7,E:2}Face art by : jenwalter666',
			'{C:cry_exotic,s:0.7,E:2}Origin : Rain World'
		}
	},
	config = {extra = {karma = 0}},
	pos = { x = 0, y = 0 },
	soul_pos = { x = 1, y = 0 },
	cost = 20,
	rarity = 4,
	unlocked = true,
	discovered = true,
	immutable = true,
	blueprint_compat = false,
	eternal_compat = true,
	perishable_compat = false,
	atlas = 'jensaint',
    loc_vars = function(self, info_queue, center)
        return {vars = {center.ability.extra.karma}}
    end,
	calculate = function(self, card, context)
        if not context.blueprint and jl.njr(context) and context.using_consumeable and context.consumeable and context.consumeable:gc().key == 'c_cry_gateway' then
			local quota = context.consumeable:getEvalQty()
			card.ability.extra.karma = card.ability.extra.karma + quota
			card_eval_status_text(card, 'extra', nil, nil, nil, {message = '+' .. quota .. ' Karma', colour = G.C.PALE_GREEN})
			card_eval_status_text(card, 'extra', nil, nil, nil, {message = (tostring(card.ability.extra.karma) .. ' / ' .. tostring(max_karma)), colour = G.C.GREEN})
			if card.ability.extra.karma >= max_karma then
				card_status_text(card, '!!!', nil, 0.05*card.T.h, G.C.DARK_EDITION, 0.6, 0.6, 2, 2, 'bm', 'jen_enlightened')
				G.E_MANAGER:add_event(Event({
					delay = 0.1,
					func = function()
						card:flip()
						play_sound('card1')
						return true
					end
				}))
				G.E_MANAGER:add_event(Event({
					delay = 1,
					func = function()
						card:flip()
						card:juice_up(1, 1)
						play_sound('card1')
						card:set_ability(G.P_CENTERS['j_jen_saint_attuned'])
						return true
					end
				}))
			end
        end
	end
}

SMODS.Joker {
	key = 'saint_attuned',
	loc_txt = {
		name = 'The Saint {C:jen_RGB}(Attuned)',
		text = {
			'{C:spectral}Gateway{} will {C:attention}not destroy Jokers{} when used',
			'{C:cry_ascendant}Yawetag{} also has {C:attention}no negative effect{} when used',
			'{X:black,C:red,s:3}^^^#1#{C:purple} Chips & Mult',
			'{C:dark_edition,s:0.7,E:2}Face art by : jenwalter666',
			'{C:cry_exotic,s:0.7,E:2}Origin : Rain World'
		}
	},
	config = {extra = {ascension = 3}},
	pos = { x = 0, y = 0 },
	soul_pos = { x = 2, y = 0 },
	cost = 100,
	rarity = 'jen_transcendent',
	unlocked = true,
	discovered = true,
	no_doe = true,
	immutable = true,
	blueprint_compat = true,
	eternal_compat = true,
	perishable_compat = false,
	atlas = 'jensaint',
    loc_vars = function(self, info_queue, center)
        return {vars = {center.ability.extra.ascension}}
    end,
	calculate = function(self, card, context)
		if context.joker_main then
			return {
				message = '^^^' .. card.ability.extra.ascension .. ' Chips & Mult',
				EEEmult_mod = card.ability.extra.ascension,
				EEEchip_mod = card.ability.extra.ascension,
				colour = G.C.BLACK,
				card = card
			}, true
		end
	end
}'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''SMODS.Joker {
	key = 'behemoth',
	loc_txt = {
		name = 'Behemoth',
		text = {
			'{X:black,C:red,s:3}^^^#1#{C:purple} Chips & Mult{} if played hand',
			'contains {C:attention}four or more 7s',
			' ',
			lore('Like a hibernating bear; lazy and slow, but obliteration is merely a single mistake away.'),
			caption('Don\'t poke a tiger in its rest; not even a cub...'),
			faceart('raidoesthings'),
			au('Prophecy of the Broken Crowns')
		}
	},
	config = {extra = {pentation = 1.77}},
	pos = { x = 0, y = 0 },
	soul_pos = { x = 1, y = 0 },
	cost = 50,
	rarity = 'cry_exotic',
	misc_badge = sevensins.behemoth,
	unlocked = true,
	discovered = true,
	blueprint_compat = true,
	eternal_compat = true,
	perishable_compat = false,
	immutable = true,
	atlas = 'jenbehemoth',
    loc_vars = function(self, info_queue, center)
        return {vars = {center.ability.extra.pentation}}
    end,
    calculate = function(self, card, context)
		if context.cardarea == G.jokers and not context.before and not context.after then
			local cards = G.play.cards
			local sevens = 0
			for k, v in pairs(cards) do
				if v:get_id() == 7 then
					sevens = sevens + 1
					if sevens >= 4 then break end
				end
			end
			if sevens >= 4 then
				return {
					message = 'Hrraaaaagh!!! (^^^' .. card.ability.extra.pentation .. ' Chips & Mult)',
					EEEmult_mod = card.ability.extra.pentation,
					EEEchip_mod = card.ability.extra.pentation,
					colour = G.C.BLACK,
					card = card
				}, true
			end
		end
	end
}'''
position = "at"
payload = '''SMODS.Joker {
	key = 'behemoth',
	loc_txt = {
		name = 'Behemoth',
		text = {
			'{X:black,C:red,s:3}^^^#1#{C:purple} Chips & Mult{} if played hand',
			'contains {C:attention}four or more 7s',
			' ',
			"{C:inactive,s:1.11,E:1}Don't poke a tiger in its{}",
			"{C:inactive,s:1.11,E:1}rest; not even a cub...{}",
			'{C:dark_edition,s:0.7,E:2}Face art by : raidoesthings'
		}
	},
	config = {extra = {pentation = 1.77}},
	pos = { x = 0, y = 0 },
	soul_pos = { x = 1, y = 0 },
	cost = 50,
	rarity = 'cry_exotic',
	misc_badge = sevensins.behemoth,
	unlocked = true,
	discovered = true,
	blueprint_compat = true,
	eternal_compat = true,
	perishable_compat = false,
	immutable = true,
	atlas = 'jenbehemoth',
    loc_vars = function(self, info_queue, center)
        return {vars = {center.ability.extra.pentation}}
    end,
    calculate = function(self, card, context)
		if context.joker_main then
			local cards = G.play.cards
			local sevens = 0
			for k, v in pairs(cards) do
				if v:get_id() == 7 then
					sevens = sevens + 1
					if sevens >= 4 then break end
				end
			end
			if sevens >= 4 then
				return {
					message = 'Hrraaaaagh!!! (^^^' .. card.ability.extra.pentation .. ' Chips & Mult)',
					EEEmult_mod = card.ability.extra.pentation,
					EEEchip_mod = card.ability.extra.pentation,
					colour = G.C.BLACK,
					card = card
				}, true
			end
		end
	end
}'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''SMODS.Joker {
	key = 'shikigami',
	loc_txt = {
		name = 'Shikigami',
		text = {
			'Scored {C:attention}7{}s create',
			'{C:attention}7 copies{} of themselves',
			' ',
			lore('The punching bag of the group, and also the shameful reason of their banishment.'),
			caption('Why are we cards?? Where even are we?!'),
			faceart('raidoesthings'),
			au('Prophecy of the Broken Crowns')
		}
	},
	pos = { x = 0, y = 0 },
	soul_pos = { x = 1, y = 0 },
	cost = 20,
	rarity = 4,
	misc_badge = sevensins.shikigami,
	unlocked = true,
	discovered = true,
	blueprint_compat = false,
	eternal_compat = true,
	perishable_compat = false,
	atlas = 'jenshikigami',
    calculate = function(self, card, context)
		if not context.blueprint then
			if context.cardarea == G.play then
				if context.other_card and not context.other_card:norank() and not context.repetition and context.other_card:get_id() == 7 then
					local sevens = {}
					for i = 1, 7 do
						local seven = copy_card(context.other_card, nil, nil, G.playing_card)
						seven:add_to_deck()
						seven:start_materialize()
						table.insert(sevens, seven)
					end
					for k, seven in pairs(sevens) do
						if seven ~= context.other_card then
							table.insert(G.playing_cards, seven)
							G.deck:emplace(seven)
						end
					end
					return nil, true
				end
			end
		end
	end
}'''
position = "at"
payload = '''SMODS.Joker {
	key = 'shikigami',
	loc_txt = {
		name = 'Shikigami',
		text = {
			'Scored {C:attention}7{}s create',
			'{C:attention}7 copies{} of themselves',
			' ',
			"{C:inactive,s:1.11,E:1}Why are we cards??{}",
			"{C:inactive,s:1.11,E:1}Where even are we?!{}",
			'{C:dark_edition,s:0.7,E:2}Face art by : raidoesthings'
		}
	},
	pos = { x = 0, y = 0 },
	soul_pos = { x = 1, y = 0 },
	cost = 20,
	rarity = 4,
	misc_badge = sevensins.shikigami,
	unlocked = true,
	discovered = true,
	blueprint_compat = false,
	eternal_compat = true,
	perishable_compat = false,
	atlas = 'jenshikigami',
    calculate = function(self, card, context)
		if context.individual and context.cardarea == G.play then
			if context.other_card:get_id() == 7 then
				local sevens = {}
				for i = 1, 7 do
					local seven = copy_card(context.other_card, nil, nil, G.playing_card)
					seven:add_to_deck()
					seven:start_materialize()
					G.deck.config.card_limit = G.deck.config.card_limit + 1
					table.insert(sevens, seven)
				end
				for k, seven in pairs(sevens) do
					if seven ~= context.other_card then
						table.insert(G.playing_cards, seven)
						G.deck:emplace(seven)
					end
				end
				return nil, true
			end
		end
	end
}'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''SMODS.Joker {
	key = 'heisei',
	loc_txt = {
		name = 'Heisei',
		text = {
			'{C:attention}7{}s raise {C:chips}Chips{} to the {X:dark_edition,C:white}power{} of',
			'{C:green}1 plus a tenth of your {C:money}money{} when scored,',
			'{C:red,E:1}but also takes half of your money',
			'{C:inactive}(No effect if you have $0 or less)',
			' ',
			lore('Sly and sneaky; socialising with you one day, pickpocketing you the next.'),
			caption('Enough about me, what is it that you desire?'),
			faceart('raidoesthings'),
			au('Prophecy of the Broken Crowns')
		}
	},
	pos = { x = 0, y = 0 },
	soul_pos = { x = 1, y = 0 },
	cost = 50,
	rarity = 'cry_exotic',
	misc_badge = sevensins.heisei,
	unlocked = true,
	discovered = true,
	blueprint_compat = true,
	eternal_compat = true,
	perishable_compat = false,
	atlas = 'jenheisei',
	immutable = true,
    calculate = function(self, card, context)
		if context.cardarea == G.play then
			if context.other_card and not context.other_card:norank() and jl.scj(context) and context.other_card:get_id() == 7 then
				local val = G.GAME.dollars
				if val > 0 then
					ease_dollars(-math.floor(G.GAME.dollars / 2))
					return {
						Echip_mod = (1 + (val/10)),
						card = card
					}, true
				end
			end
		end
	end
}'''
position = "at"
payload = '''SMODS.Joker {
	key = 'heisei',
	loc_txt = {
		name = 'Heisei',
		text = {
			'{C:attention}7{}s raise {C:chips}Chips{} to the {X:dark_edition,C:white}power{} of',
			'{C:green}1 plus a tenth of your {C:money}money{} when scored,',
			'{C:red,E:1}but also takes half of your money',
			'{C:inactive}(No effect if you have $0 or less)',
			' ',
			"{C:inactive,s:1.11,E:1}Enough about me, what{}",
			"{C:inactive,s:1.11,E:1}is it that you desire?{}",
			'{C:dark_edition,s:0.7,E:2}Face art by : raidoesthings'
		}
	},
	pos = { x = 0, y = 0 },
	soul_pos = { x = 1, y = 0 },
	cost = 50,
	rarity = 'cry_exotic',
	misc_badge = sevensins.heisei,
	unlocked = true,
	discovered = true,
	blueprint_compat = true,
	eternal_compat = true,
	perishable_compat = false,
	atlas = 'jenheisei',
    calculate = function(self, card, context)
		if context.cardarea == G.play and context.individual then
			if context.other_card:get_id() == 7 then
				local val = G.GAME.dollars
				if to_big(val) > to_big(0) then
					ease_dollars(-math.floor(to_big(G.GAME.dollars) / to_big(2)))
					return {
						Echip_mod = (1 + (val/10)),
						card = card
					}, true
				end
			end
		end
	end
}'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''SMODS.Joker {
	key = 'hydrangea',
	loc_txt = {
		name = 'Hydrangea',
		text = {
			'{C:attention}7{}s reduce the {C:attention}current Blind',
			'by {C:attention}7%{} when scored',
			' ',
			lore('A brute with a pinch of impatience, getting on her bad side is not uncommon.'),
			caption('Whatever you\'re bugging me about better be important...'),
			faceart('raidoesthings'),
			au('Prophecy of the Broken Crowns')
		}
	},
	pos = { x = 0, y = 0 },
	soul_pos = { x = 1, y = 0 },
	cost = 50,
	rarity = 'cry_exotic',
	misc_badge = sevensins.hydrangea,
	unlocked = true,
	discovered = true,
	blueprint_compat = true,
	eternal_compat = true,
	perishable_compat = false,
	immutable = true,
	atlas = 'jenhydrangea',
    calculate = function(self, card, context)
		if context.cardarea == G.play then
			if context.other_card and not context.other_card:norank() and jl.scj(context) and context.other_card:get_id() == 7 then
				if (G.SETTINGS.FASTFORWARD or 0) < 1 and (G.SETTINGS.STATUSTEXT or 0) < 2 then
					card_status_text(card, '-7% Blind Size', nil, 0.05*card.T.h, G.C.FILTER, 0.75, 1, 0.6, nil, 'bm', 'generic1')
				end
				change_blind_size(to_big(G.GAME.blind.chips) / to_big(1.07), (G.SETTINGS.FASTFORWARD or 0) > 1, (G.SETTINGS.FASTFORWARD or 0) > 1)
				return nil, true
			end
		end
	end
}'''
position = "at"
payload = '''SMODS.Joker {
	key = 'hydrangea',
	loc_txt = {
		name = 'Hydrangea',
		text = {
			'{C:attention}7{}s reduce the {C:attention}current Blind',
			'by {C:attention}7%{} when scored',
			' ',
			"{C:inactive,s:1.11,E:1}Whatever you're bugging me{}",
			"{C:inactive,s:1.11,E:1}about better be important.{}",
			'{C:dark_edition,s:0.7,E:2}Face art by : raidoesthings'
		}
	},
	pos = { x = 0, y = 0 },
	soul_pos = { x = 1, y = 0 },
	cost = 50,
	rarity = 'cry_exotic',
	misc_badge = sevensins.hydrangea,
	unlocked = true,
	discovered = true,
	blueprint_compat = true,
	eternal_compat = true,
	perishable_compat = false,
	atlas = 'jenhydrangea',
    calculate = function(self, card, context)
		if context.cardarea == G.play and context.individual then
			if context.other_card:get_id() == 7 then
				local value = 1.07
				if (G.SETTINGS.FASTFORWARD or 0) < 1 and (G.SETTINGS.STATUSTEXT or 0) < 2 then
					card_status_text(card, '-7% Blind Size', nil, 0.05*card.T.h, G.C.FILTER, 0.75, 1, 0.6, nil, 'bm', 'generic1')
				end
				G.E_MANAGER:add_event(Event({func = function()
					G.GAME.blind.chips = G.GAME.blind.chips / value
					G.GAME.blind.chip_text = number_format(G.GAME.blind.chips)
					play_sound('timpani')
					delay(0.4)
					return true 
				end}))
			end
		end
	end
}'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''SMODS.Joker {
	key = 'roffle',
	loc_txt = {
		name = 'Roffle',
		text = {
			'Grants {C:green}the Coin',
			'Whenever any {C:attention}Joker{} is {C:attention}triggered{},',
			'generate {C:spectral,E:1}Mana{} for {C:green}the Coin',
			' ',
			lore('A wise card player. Particularly fond friends with the Wee Joker.'),
			caption('WEEEEEEEE!!'),
			faceart('jenwalter666'),
			'{C:cry_ascendant,E:1}https://www.twitch.tv/roffle'
		}
	},
	pos = { x = 0, y = 0 },
	soul_pos = { x = 1, y = 0 },
	cost = 50,
	rarity = 'cry_exotic',
	misc_badge = twitch,
	unlocked = true,
	discovered = true,
	blueprint_compat = true,
	eternal_compat = true,
	perishable_compat = false,
	immutable = true,
	atlas = 'jenroffle',
	abilitycard = 'c_jen_roffle_c',
	calculate = function(self, card, context)
		if context.post_trigger and not context.blueprint and context.other_joker and context.other_joker:gc().key ~= 'j_jen_astro' then
			for k, v in ipairs(G.consumeables.cards) do
				if v.gc and v:gc() and v:gc().key == 'c_jen_roffle_c' and not (v.edition or {}).negative then
					Q(function() card:juice_up(0.5, 0.5) return true end)
					v.ability.mana = v.ability.mana + 1
					card.cumulative_mana = (card.cumulative_mana or 0) + 1
					if card.cumulative_mana <= 1 then
						QR(function()
							if card then
								if card.cumulative_mana then
									card_eval_status_text(v, 'extra', nil, nil, nil, {message = '+' .. number_format(card.cumulative_mana) .. ' Mana', colour = G.C.SECONDARY_SET.Spectral})
									card.cumulative_mana = nil
								end
							end
						return true end, 15)
					end
					break
				end
			end
		end
	end,
}

SMODS.Consumable {
	key = 'roffle_c',
	loc_txt = {
		name = 'The Coin',
		text = {
			'{X:spectral,C:white}Mana{} : {C:spectral}#1# {C:inactive}/ #2#',
			'If {C:dark_edition}Negative{}, add {C:spectral}5 mana{},',
			'Otherwise, spend mana to {C:attention}defeat the blind instantly',
			faceart('jenwalter666'),
			origin('Hearthstone')
		}
	},
	config = {mana = 0},
	set = 'jen_jokerability',
	permaeternal = true,
	pos = { x = 0, y = 0 },
	soul_pos = { x = 1, y = 0 },
	cost = 0,
	unlocked = true,
	discovered = true,
	hidden = true,
	hidden2 = true,
	no_doe = true,
	soul_rate = 0,
	atlas = 'jenroffle_c',
    loc_vars = function(self, info_queue, center)
		local isneg = ((center or {}).edition or {}).negative
        return {vars = {isneg and '---' or center.ability.mana, (G.GAME or {}).roffle_manareq or Jen.config.mana_cost}}
    end,
	can_use = function(self, card)
		return (((card.edition or {}).negative or card.ability.mana >= ((G.GAME or {}).roffle_manareq or Jen.config.mana_cost)) and abletouseabilities()) and G.GAME.blind
	end,
	keep_on_use = function(self, card)
		return #SMODS.find_card('j_jen_roffle') > 0 and not (card.edition or {}).negative
	end,
	use = function(self, card, area, copier)
		if not G.GAME.roffle_manareq then G.GAME.roffle_manareq = Jen.config.mana_cost end
		if (card.edition or {}).negative then
			for k, v in ipairs(G.consumeables.cards) do
				if v.gc and v:gc() and v:gc().key == 'c_jen_roffle_c' and not (v.edition or {}).negative then
					v.ability.mana = v.ability.mana + 5
					card_eval_status_text(v, 'extra', nil, nil, nil, {message = '+5 Mana', colour = G.C.SECONDARY_SET.Spectral})
					break
				end
			end
		elseif card.ability.mana >= G.GAME.roffle_manareq then
			card.ability.mana = card.ability.mana - G.GAME.roffle_manareq
			card_eval_status_text(card, 'extra', nil, nil, nil, {message = '-' .. number.format(G.GAME.roffle_manareq) .. ' Mana', colour = G.C.RED})
			G.GAME.roffle_manareq = G.GAME.roffle_manareq * 2
			Q(function()
				Q(function()
					Q(function()
						Q(function()
							G.GAME.chips = G.GAME.blind.chips
							G.STATE = G.STATES.HAND_PLAYED
							G.STATE_COMPLETE = true
							end_round()
						return true end)
						jl.ch()
					return true end)
				return true end)
			return true end)
		end
	end
}'''
position = "at"
payload = '''SMODS.Joker {
	key = 'roffle',
	loc_txt = {
		name = 'Roffle',
		text = {
			'Grants {C:green}the Coin',
			'Whenever any {C:attention}Joker{} is {C:attention}triggered{},',
			'generate {C:spectral,E:1}Mana{} for {C:green}the Coin',
			' ',
			'{C:inactive,E:1}Keep the Coin on hand, you never know',
			'{C:inactive,E:1}when you might need that extra mana.',
			'{C:dark_edition,s:0.7,E:2}Face art by : jenwalter666',
			'{C:cry_ascendant,E:1}https://www.twitch.tv/roffle'
		}
	},
	pos = { x = 0, y = 0 },
	soul_pos = { x = 1, y = 0 },
	cost = 20,
	rarity = 4,
	misc_badge = twitch,
	unlocked = true,
	discovered = true,
	blueprint_compat = true,
	eternal_compat = true,
	perishable_compat = false,
	immutable = true,
	atlas = 'jenroffle',
	abilitycard = 'c_jen_roffle_c',
	calculate = function(self, card, context)
		if not context.blueprint and context.post_trigger and context.other_joker ~= self then
			for k, v in ipairs(G.consumeables.cards) do
				if v.gc and v:gc() and v:gc().key == 'c_jen_roffle_c' and not (v.edition or {}).negative then
					Q(function() card:juice_up(0.5, 0.5) return true end)
					v.ability.mana = v.ability.mana + 1
					card_eval_status_text(v, 'extra', nil, nil, nil, {message = '+1 Mana', colour = G.C.SECONDARY_SET.Spectral})
					break
				end
			end
		end
	end,
}

SMODS.Consumable {
	key = 'roffle_c',
	loc_txt = {
		name = 'The Coin',
		text = {
			'{X:spectral,C:white}Mana{} : {C:spectral}#1#',
			'{C:green}#2#',
		}
	},
	config = {mana = 0},
	set = 'jen_jokerability',
	permaeternal = true,
	pos = { x = 0, y = 0 },
	soul_pos = { x = 1, y = 0 },
	cost = 0,
	unlocked = true,
	discovered = true,
	hidden = true,
	no_doe = true,
	soul_rate = 0,
	atlas = 'jenroffle_c',
    loc_vars = function(self, info_queue, center)
		local isneg = ((center or {}).edition or {}).negative
        return {vars = {isneg and '---' or center.ability.mana, isneg and 'Adds +5 Mana to The Coin (non-negative)' or 'Spend ' .. Jen.config.mana_cost .. ' Mana for +1 hand this round'}}
    end,
	can_use = function(self, card)
		return ((card.edition or {}).negative or card.ability.mana >= Jen.config.mana_cost) and abletouseabilities()
	end,
	keep_on_use = function(self, card)
		return #SMODS.find_card('j_jen_roffle') > 0 and not (card.edition or {}).negative
	end,
	use = function(self, card, area, copier)
		if (card.edition or {}).negative then
			for k, v in ipairs(G.consumeables.cards) do
				if v.gc and v:gc() and v:gc().key == 'c_jen_roffle_c' and not (v.edition or {}).negative then
					v.ability.mana = v.ability.mana + 5
					card_eval_status_text(v, 'extra', nil, nil, nil, {message = '+5 Mana', colour = G.C.SECONDARY_SET.Spectral})
					break
				end
			end
		elseif card.ability.mana >= Jen.config.mana_cost then
			card.ability.mana = card.ability.mana - Jen.config.mana_cost
			card_eval_status_text(card, 'extra', nil, nil, nil, {message = '-' .. Jen.config.mana_cost .. ' Mana', colour = G.C.RED})
			card_eval_status_text(card, 'extra', nil, nil, nil, {message = '+1 Hand', colour = G.C.BLUE})
			ease_hands_played(1)
		end
	end
}'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''SMODS.Joker {
	key = 'cheese',
	loc_txt = {
		name = 'Cheese',
		text = {
			'{C:blue}+#1#{} hand(s) if played',
			'hand is your {C:attention}most played',
			'{C:inactive}(#2#)',
			' ',
			caption('#3#'),
			faceart('idot1537'),
			origin('Rain World')
		}
	},
	config = {add = 1},
	pos = { x = 0, y = 0 },
	soul_pos = { x = 1, y = 0 },
	cost = 10,
	rarity = 3,
	unlocked = true,
	discovered = true,
	blueprint_compat = true,
	eternal_compat = true,
	perishable_compat = false,
	atlas = 'jencheese',
    loc_vars = function(self, info_queue, center)
        return {vars = {center.ability.add, jl.favhand(), #SMODS.find_card('j_jen_jeremy') > 0 and cheese_quotes.bb[math.random(#cheese_quotes.bb)] or cheese_quotes.normal[math.random(#cheese_quotes.normal)]}}
    end,
    calculate = function(self, card, context)
		if context.cardarea == G.jokers and not context.before and not context.after and context.poker_hands and next(context.poker_hands[jl.favhand()]) then
			card_eval_status_text(card, 'extra', nil, nil, nil, {message = cheese_quotes.trigger[math.random(#cheese_quotes.trigger)], colour = G.C.BLUE})
			ease_hands_played(card.ability.add or 1)
			return nil, true
		end
	end
}

SMODS.Joker {
	key = 'jeremy',
	loc_txt = {
		name = 'Jeremy',
		text = {
			'Scored cards give',
			'{C:mult}+#1#{} Mult each',
			'{X:green,C:white}Synergy:{} Scored cards give',
			'{X:mult,C:white}x#1#{} Mult each instead',
			'if you have {X:attention}Cheese',
			' ',
			caption('#2#'),
			faceart('idot1537'),
			origin('Rain World')
		}
	},
	config = {mul = 2},
	pos = { x = 0, y = 0 },
	soul_pos = { x = 1, y = 0 },
	cost = 6,
	rarity = 2,
	unlocked = true,
	discovered = true,
	blueprint_compat = true,
	eternal_compat = true,
	perishable_compat = false,
	atlas = 'jenjeremy',
    loc_vars = function(self, info_queue, center)
        return {vars = {center.ability.mul, #SMODS.find_card('j_jen_cheese') > 0 and 'Wawa!' or ('Wawa.' .. (math.random(2) == 1 and '..' or ''))}}
    end,
    calculate = function(self, card, context)
		if context.cardarea == G.play then
			local ret = {
				message = 'Wawa!',
				colour = G.C.MULT,
				card = card
			}
			if #SMODS.find_card('j_jen_cheese') > 0 then
				ret.x_mult = card.ability.mul
				ret.message = ret.message .. ' (x' .. number_format(card.ability.mul) .. ' Mult)'
			else
				ret.mult = card.ability.mul
				ret.message = ret.message .. ' (+' .. number_format(card.ability.mul) .. ' Mult)'
			end
			return ret, true
		end
	end
}'''
position = "at"
payload = '''SMODS.Joker {
	key = 'cheese',
	loc_txt = {
		name = 'Cheese',
		text = {
			'{C:blue}+#1#{} hand(s) if played',
			'hand is your {C:attention}most played',
			'{C:inactive}(#2#)',
			' ',
			"{C:inactive,E:1}#3#{}",
			'{C:dark_edition,s:0.7,E:2}Face art by : idot1537',
			'{C:cry_exotic,s:0.7,E:2}Origin : Rain World'
		}
	},
	config = {add = 1},
	pos = { x = 0, y = 0 },
	soul_pos = { x = 1, y = 0 },
	cost = 10,
	rarity = 3,
	unlocked = true,
	discovered = true,
	blueprint_compat = true,
	eternal_compat = true,
	perishable_compat = false,
	atlas = 'jencheese',
    loc_vars = function(self, info_queue, center)
        return {vars = {center.ability.add, jl.favhand(), #SMODS.find_card('j_jen_jeremy') > 0 and cheese_quotes.bb[math.random(#cheese_quotes.bb)] or cheese_quotes.normal[math.random(#cheese_quotes.normal)]}}
    end,
    calculate = function(self, card, context)
		if context.joker_main and context.poker_hands and next(context.poker_hands[jl.favhand()]) then
			card_eval_status_text(card, 'extra', nil, nil, nil, {message = cheese_quotes.trigger[math.random(#cheese_quotes.trigger)], colour = G.C.BLUE})
			ease_hands_played(card.ability.add or 1)
			return nil, true
		end
	end
}

SMODS.Joker {
	key = 'jeremy',
	loc_txt = {
		name = 'Jeremy',
		text = {
			'Scored cards give',
			'{C:mult}+#1#{} Mult each',
			'{X:green,C:white}Synergy:{} Scored cards give',
			'{X:mult,C:white}x#1#{} Mult each instead',
			'if you have {X:attention}Cheese',
			' ',
			"{C:inactive,E:1}#2#{}",
			'{C:dark_edition,s:0.7,E:2}Face art by : idot1537',
			'{C:cry_exotic,s:0.7,E:2}Origin : Rain World'
		}
	},
	config = {mul = 2},
	pos = { x = 0, y = 0 },
	soul_pos = { x = 1, y = 0 },
	cost = 6,
	rarity = 2,
	unlocked = true,
	discovered = true,
	blueprint_compat = true,
	eternal_compat = true,
	perishable_compat = false,
	atlas = 'jenjeremy',
    loc_vars = function(self, info_queue, center)
        return {vars = {center.ability.mul, #SMODS.find_card('j_jen_cheese') > 0 and 'Wawa!' or ('Wawa.' .. (math.random(2) == 1 and '..' or ''))}}
    end,
    calculate = function(self, card, context)
		if context.individual and context.cardarea == G.play then
			local ret = {
				message = 'Wawa!',
				colour = G.C.MULT,
				card = card
			}
			if #SMODS.find_card('j_jen_cheese') > 0 then
				ret.x_mult = card.ability.mul
				ret.message = ret.message .. ' (x' .. number_format(card.ability.mul) .. ' Mult)'
			else
				ret.mult = card.ability.mul
				ret.message = ret.message .. ' (+' .. number_format(card.ability.mul) .. ' Mult)'
			end
			return ret, true
		end
	end
}'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''SMODS.Joker {
	key = 'oxy',
	loc_txt = {
		name = '{C:pastel_yellow}O{C:pink}x{}y',
		text = {
			'{C:attention}Steel{} cards give',
			'{X:purple,C:white}x#1#{} Chips & Mult',
			'when scored',
			' ',
			caption('#2#') .. '{C:red,E:1}#3#' .. caption('#4#'),
			faceart('ocksie')
		}
	},
	misc_badge = {
		colour = G.C.almanac,
		text_colour = G.C.CRY_BLOSSOM,
		text = {
			'Disciple of Kosmos',
			'ocksie'
		}
	},
	config = {steel = 1.5},
	pos = { x = 0, y = 0 },
	soul_pos = { x = 1, y = 0 },
	sinis = { x = 2, y = 0 },
	cost = 10,
	rarity = 3,
	fusable = true,
	unlocked = true,
	discovered = true,
	blueprint_compat = true,
	eternal_compat = true,
	perishable_compat = false,
	atlas = 'jenoxy',
	in_pool = function()
		return #SMODS.find_card('j_jen_inhabited') <= 0
	end,
    loc_vars = function(self, info_queue, center)
        return {vars = {center.ability.steel, Jen.sinister and 'WHAT ARE YOU ' or Jen.gods() and 'I am-... I am-... I am... what is this feeling?' or 'We all cut close...', Jen.sinister and 'DOING ' or '', Jen.sinister and 'DOWN THERE?!?' or ''}}
    end,
    calculate = function(self, card, context)
		if context.individual then
			if context.cardarea == G.play then
				if context.other_card.ability.name == 'Steel Card' then
					return {
						x_chips = card.ability.steel,
						x_mult = card.ability.steel,
						colour = G.C.PURPLE,
						card = card
					}, true
				end
			end
		end
	end
}'''
position = "at"
payload = '''SMODS.Joker {
	key = 'oxy',
	loc_txt = {
		name = 'Oxy',
		text = {
			'{C:attention}Steel{} cards give',
			'{X:purple,C:white}x#1#{} Chips & Mult',
			'when scored',
			' ',
			"{C:inactive,E:1}#2#{C:red,E:1}#3#{C:inactive,E:1}#4#",
			'{C:dark_edition,s:0.7,E:2}Face art by : ocksie',
		}
	},
	misc_badge = {
		colour = G.C.almanac,
		text_colour = G.C.CRY_BLOSSOM,
		text = {
			'Disciple of Kosmos',
			'ocksie'
		}
	},
	config = {steel = 1.5},
	pos = { x = 0, y = 0 },
	soul_pos = { x = 1, y = 0 },
	sinis = { x = 2, y = 0 },
	cost = 10,
	rarity = 3,
	fusable = true,
	unlocked = true,
	discovered = true,
	blueprint_compat = true,
	eternal_compat = true,
	perishable_compat = false,
	atlas = 'jenoxy',
    loc_vars = function(self, info_queue, center)
        return {vars = {center.ability.steel, Jen.sinister and 'WHAT ARE YOU ' or Jen.gods() and 'I am-... I am-... I am... what is this feeling?' or 'We all cut close...', Jen.sinister and 'DOING ' or '', Jen.sinister and 'DOWN THERE?!?' or ''}}
    end,
    calculate = function(self, card, context)
		if context.main_scoring and context.cardarea == G.play then
			if context.other_card.ability.name == 'Steel Card' then
				return {
					x_chips = card.ability.steel,
					x_mult = card.ability.steel,
					colour = G.C.PURPLE,
					card = card
				}, true
			end
		end
	end
}'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''SMODS.Joker {
	key = 'jen',
	loc_txt = {
		name = 'Jen Walter',
		text = {
			'{C:blue}+1 Chip{C:inactive,E:1}...?',
			' ',
			"{C:inactive,s:1.8,E:1}#1#",
			faceart('jenwalter666'),
			origin('CRAFTWORLD')
		}
	},
	pos = { x = 0, y = 0 },
	soul_pos = { x = 1, y = 0 },
	cost = 1,
	fusable = true,
	rarity = 1,
	misc_badge = iconic,
	wee_incompatible = true,
	unlocked = true,
	unique = true,
	immutable = true,
	discovered = true,
	blueprint_compat = false,
	eternal_compat = true,
	perishable_compat = false,
	atlas = 'jenjen',
	in_pool = function()
		return #SMODS.find_card('j_jen_wondergeist') + #SMODS.find_card('j_jen_wondergeist2') <= 0
	end,
    loc_vars = function(self, info_queue, center)
        return {vars = {Jen.gods() and 'i feel funny...' or "i'm trying..."}}
    end,
    calculate = function(self, card, context)
		if not context.blueprint_card then
			if context.cardarea == G.jokers and not context.before and not context.after then
				if #SMODS.find_card('j_jen_rai') > 0 and #SMODS.find_card('j_jen_koslo') > 0 then
					return {
						message = '^1e100 Mult',
						Emult_mod = 1e100,
						colour = G.C.DARK_EDITION
					}, true
				elseif #SMODS.find_card('j_jen_rai') > 0 or #SMODS.find_card('j_jen_koslo') > 0 then
					return {
						message = 'x777',
						Xchip_mod = 777,
						colour = G.C.CHIPS
					}, true
				else
					return {
						message = '+1',
						chip_mod = 1,
						colour = G.C.CHIPS
					}, true
				end
			end
		end
	end
}'''
position = "at"
payload = '''SMODS.Joker {
	key = 'jen',
	loc_txt = {
		name = 'Jen Walter',
		text = {
			'{C:blue}+1 Chip{C:inactive,E:1}...?',
			' ',
			"{C:inactive,s:1.8,E:1}#1#{}",
			'{C:dark_edition,s:0.7,E:2}Face art by : jenwalter666'
		}
	},
	pos = { x = 0, y = 0 },
	soul_pos = { x = 1, y = 0 },
	cost = 1,
	fusable = true,
	rarity = 1,
	misc_badge = iconic,
	unlocked = true,
	discovered = true,
	blueprint_compat = false,
	eternal_compat = true,
	perishable_compat = false,
	atlas = 'jenjen',
	in_pool = function()
		return #SMODS.find_card('j_jen_wondergeist') + #SMODS.find_card('j_jen_wondergeist2') <= 0
	end,
    loc_vars = function(self, info_queue, center)
        return {vars = {Jen.gods() and 'i feel funny...' or "i'm trying..."}}
    end,
    calculate = function(self, card, context)
		if not context.blueprint_card then
			if context.joker_main then
				if next(SMODS.find_card('j_jen_rai')) and next(SMODS.find_card('j_jen_koslo')) then
					return {
						message = '^1e100 Mult',
						Emult_mod = 1e100,
						colour = G.C.DARK_EDITION
					}, true
				elseif next(SMODS.find_card('j_jen_rai')) or next(SMODS.find_card('j_jen_koslo')) then
					return {
						message = 'x777',
						x_chips = 777,
						colour = G.C.CHIPS
					}, true
				else
					return {
						message = '+1',
						chips = 1,
						colour = G.C.CHIPS
					}, true
				end
			end
		end
	end
}'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''SMODS.Joker {
	key = 'jimbo',
	loc_txt = {
		name = '{C:chips}J{C:attention}imb{C:mult}o',
		text = {
			'{C:mult}+444,444,444{}, {X:mult,C:white}x44,444,444{},',
			'{X:mult,C:dark_edition}^4,444,444{}, {X:jen_RGB,C:white}^^444,444{},',
			'{X:black,C:red}^^^44,444{} and {X:black,C:purple}^^^^4,444{} Mult',
			'{C:inactive,s:0.7,E:1}Hey, buddy! I figured I might as well hop in and have fun!',
			faceart('LocalThunk'),
			origin('Balatro')
		}
	},
	pos = { x = 0, y = 0 },
	soul_pos = { x = 1, y = 0 },
	cost = 888888,
	rarity = 'jen_transcendent',
	no_doe = true,
	misc_badge = secret,
	unlocked = true,
	discovered = true,
	blueprint_compat = true,
	eternal_compat = true,
	perishable_compat = false,
	immutable = true,
	debuff_immune = true,
	wee_incompatible = true,
	atlas = 'jenjimbo',
    calculate = function(self, card, context)
		if context.cardarea == G.jokers and not context.before and not context.after and context.scoring_name then
			if not context.retrigger_joker then
				card_eval_status_text(card, 'extra', nil, nil, nil, {message = 'Hee-hee!', colour = G.C.CHIPS})
				card_eval_status_text(card, 'extra', nil, nil, nil, {message = 'Hoo-hoo!', colour = G.C.MULT})
			end
			return {
				message = 'Haa-haa!',
				mult_mod = 444444444,
				Xmult_mod = 44444444,
				Emult_mod = 4444444,
				EEmult_mod = 444444,
				EEEmult_mod = 44444,
				hypermult_mod = {4, 4444},
				colour = G.C.FILTER,
				card = card
			}, true
		end
	end
}'''
position = "at"
payload = '''SMODS.Joker {
	key = 'jimbo',
	loc_txt = {
		name = '{C:chips}J{C:attention}imb{C:mult}o',
		text = {
			'{C:mult}+444,444,444{}, {X:mult,C:white}x44,444,444{},',
			'{X:mult,C:dark_edition}^4,444,444{}, {X:jen_RGB,C:white}^^444,444{},',
			'{X:black,C:red}^^^44,444{} and {X:black,C:purple}^^^^4,444{} Mult',
			'{C:inactive,s:0.7,E:1}Hey, buddy! I figured I might as well hop in and have fun!',
			'{C:dark_edition,s:0.7,E:2}Face art by : LocalThunk',
			'{C:cry_exotic,s:0.7,E:2}Origin : Balatro'
		}
	},
	pos = { x = 0, y = 0 },
	soul_pos = { x = 1, y = 0 },
	cost = 888888,
	rarity = 'jen_transcendent',
	no_doe = true,
	misc_badge = secret,
	unlocked = true,
	discovered = true,
	blueprint_compat = true,
	eternal_compat = true,
	perishable_compat = false,
	immutable = true,
	debuff_immune = true,
	atlas = 'jenjimbo',
    calculate = function(self, card, context)
		if context.joker_main and context.scoring_name then
			if not context.retrigger_joker then
				card_eval_status_text(card, 'extra', nil, nil, nil, {message = 'Hee-hee!', colour = G.C.CHIPS})
				card_eval_status_text(card, 'extra', nil, nil, nil, {message = 'Hoo-hoo!', colour = G.C.MULT})
			end
			return {
				message = 'Haa-haa!',
				mult_mod = 444444444,
				Xmult_mod = 44444444,
				Emult_mod = 4444444,
				EEmult_mod = 444444,
				EEEmult_mod = 44444,
				hypermult_mod = {4, 4444},
				colour = G.C.FILTER,
				card = card
			}, true
		end
	end
}'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''SMODS.Joker {
	key = 'goob_lefthand',
	loc_txt = {
		name = "Goob's {C:mult}Left Hand",
		text = {
			'{C:red}Discard{} all cards to the {C:attention}left',
			'of this card when {C:attention}playing a hand',
			'No effect if on the right side of the right hand',
			' ',
			faceart('jenwalter666'),
			origin('Dandy\'s World')
		}
	},
	pos = { x = 0, y = 0 },
	soul_pos = { x = 1, y = 0 },
	cost = 0,
	rarity = 'jen_miscellaneous',
	wee_incompatible = true,
	no_doe = true,
	unlocked = true,
	discovered = true,
	immutable = true,
	unique = true,
	uncopyable = true,
	debuff_immune = true,
	unhighlightable = true,
	unchangeable = true,
	blueprint_compat = false,
	eternal_compat = true,
	perishable_compat = false,
	atlas = 'jengoob_lefthand'
}

goob_blurbs = {
	addtohand = {
		'Free hugs!',
		'Gorsh!',
		"It's time for hugs!",
		"Come here! Hehehe!",
		"Yyyoop!",
		"Hu-hahahahaha!",
		"Hehehehehe!"
	},
	hug = {
		"Get over here! Teeheehee!",
		"Huuuuug!",
		"Never hugged cards before!",
		"Group hug!",
		"Let's cuddle!",
		"Hugs!",
		"Let me turn that frown upside down!",
		"Hugs are the best medicine to a frown!",
	},
	play = {
		"Sorry, coming through!",
		"Excuse me!",
		"Need to make space!",
		"Sorry, cards!",
		"This way, please!",
		"Swoop!",
		"This is fun!",
		"Cleaning it up!",
		"Don't worry, I'm gentle!",
		"Pardon me!",
		"I apologise!",
		"We need other cards!",
		"I'm sure Scraps will look after those cards!",
		"Don't worry Goob, it's just cards...",
		"Silly me!"
	},
	discard = {
		"How about... this?",
		"Maybe this!",
		"Nope, this one!",
		"Thiiiiis!",
		"How's this fit on you?",
		"Like makeup for paper!",
		"Even cards need to dress to impress!",
		"This is getting better and better!",
		"Hmm...! What would Scraps choose?",
		"This one!",
		"Curvy...!",
		"I like it when it looks perfect!",
		"Let's try this!",
		"This?",
		"Nope, another one...",
		"Nah, this one!",
		"Hmmm...",
		"Decisions, decisions...",
		"I did Scraps's makeup, but this is hard!",
		"Oops, maybe this one..."
	},
	hands_lost = {
		"Oof!",
		"D'aaooww!",
		"Aaagh!",
		"My hands!",
		"Owww!",
		"Aaoowww!",
		"AAAAA-hoo-hoo-hooiee!",
		"Geeeoowwwch!"
	}
}

SMODS.Joker {
	key = 'goob',
	loc_txt = {
		name = '{C:chips,s:1.21}G{C:mult,s:0.79}o{C:chips,s:1.3}o{C:mult,s:0.9}b',
		text = {
			'After drawing the {C:attention}first hand{}, this Joker',
			'{C:attention}replaces the leftmost and rightmost',
			'playing cards back into the deck and',
			'{C:attention}places his {C:chips}h{C:mult}a{C:chips}n{C:mult}d{C:chips}s{} into your hand',
			'At the {C:attention}end of round{},',
			'the cards {C:attention}inbetween this Joker\'s {C:chips}h{C:mult}a{C:chips}n{C:mult}d{C:chips}s',
			'will {C:planet}upgrade your poker hands{} based on what poker hands',
			'{C:attention}could be made{} with those cards from {C:attention}all the possible choices',
			'{s:1.5,C:red}#1#',
			"{C:inactive,s:0.9,E:1}*He's a goofy goober; one who shows the kids that",
			"{C:inactive,s:0.9,E:1}hugs are one of the best medicines for a frown!*",
			faceart('jenwalter666'),
			origin('Dandy\'s World')
		}
	},
	config = {active = false, missinghands = false},
	pos = { x = 0, y = 0 },
	soul_pos = { x = 1, y = 0 },
	cost = 12,
	rarity = 'cry_epic',
	wee_incompatible = true,
	unlocked = true,
	discovered = true,
	experimental = true,
	longful = true,
	immutable = true,
	debuff_immune = true,
	blueprint_compat = false,
	eternal_compat = true,
	perishable_compat = false,
	immune_to_vermillion = true,
	unique = true,
	atlas = 'jengoob',
    loc_vars = function(self, info_queue, center)
		local qty = voucherscount()
        return {vars = {center.ability.missinghands and 'Incapacitated! End a round to recover this Joker.' or ''}}
    end,
	update = function(self, card, front)
		if card.added_to_deck then
			if card.children.floating_sprite and card.children.center then
				if card.ability.missinghands then
					card.children.center:set_sprite_pos({x = 0, y = 1})
					card.children.floating_sprite:set_sprite_pos({x = 3, y = 0})
				elseif ((G.GAME or {}).blind or {}).in_blind and card.ability.active then
					card.children.center:set_sprite_pos({x = 0, y = 0})
					card.children.floating_sprite:set_sprite_pos({x = 2, y = 0})
				else
					card.children.center:set_sprite_pos({x = 0, y = 0})
					card.children.floating_sprite:set_sprite_pos({x = 1, y = 0})
				end
			end
			if card.ability and G.hand then
				local lh = jl.fc('j_jen_goob_lefthand', 'all') or {}
				local rh = jl.fc('j_jen_goob_righthand', 'all') or {}
				card.ability.active = ((G.GAME or {}).blind or {}).in_blind and G.STATE == G.STATES.SELECTING_HAND and next(lh) and next(rh) and rh:xpos() > lh:xpos()
			end
			if ((G.GAME or {}).blind or {}).in_blind and not card.ability.missinghands and not card.goob_failsafe_activate then
				if #G.hand.cards <= 2 and card.ability.active then
					card.goob_failsafe_activate = true
					if #G.deck.cards > 0 then
						draw_card(G.deck, G.hand, 100, 'up')
						Q(function() if card then card.goob_failsafe_activate = nil end return true end)
					end
				end
			end
		end
	end,
	add_to_deck = function(self, card, from_debuff)
		if not from_debuff and #SMODS.find_card('j_jen_goob', true) <= 0 then
			local leftie = jl.fc('j_jen_goob_lefthand', 'all')
			if leftie then leftie:destroy() end
			local rightie = jl.fc('j_jen_goob_righthand', 'all')
			if rightie then rightie:destroy() end
			local lh = create_card('Joker', G.jokers, nil, nil, nil, nil, 'j_jen_goob_lefthand', 'goob_lh')
			lh:start_materialize({G.C.CHIPS})
			lh:add_to_deck()
			G.jokers:emplace(lh)
			card.ability.left_hand = lh.sort_id
			local rh = create_card('Joker', G.jokers, nil, nil, nil, nil, 'j_jen_goob_righthand', 'goob_rh')
			rh:add_to_deck({G.C.MULT})
			card.ability.right_hand = rh.sort_id
			G.jokers:emplace(rh)
			G.jokers:change_size_absolute(2)
		end
	end,
	remove_from_deck = function(self, card, from_debuff)
		if not from_debuff and #SMODS.find_card('j_jen_goob', true) <= 1 then
			local leftie = jl.fc('j_jen_goob_lefthand', 'all')
			if leftie then leftie:destroy() end
			local rightie = jl.fc('j_jen_goob_righthand', 'all')
			if rightie then rightie:destroy() end
			if ((G.GAME or {}).blind or {}).in_blind then
				G.hand:change_size(-2)
				G.GAME.round_resets.temp_handsize = (G.GAME.round_resets.temp_handsize or 0) - 2
			end
			G.jokers:change_size_absolute(-2)
		end
	end,
    calculate = function(self, card, context)
		if not context.blueprint and jl.njr(context) and not context.jen_adding_card then
			local lh = jl.fc('j_jen_goob_lefthand', 'all') or {}
			local rh = jl.fc('j_jen_goob_righthand', 'all') or {}
			local lhih = (lh.area or {}) == G.hand
			local rhih = (rh.area or {}) == G.hand
			if not (next(lh) and next(rh)) and not card.ability.missinghands then
				play_sound_q('jen_hurt' .. math.random(3))
				card:speak(goob_blurbs.hands_lost, G.C.RED)
				card.ability.missinghands = true
				if ((G.GAME or {}).blind or {}).in_blind then
					G.hand:change_size(-2)
					G.GAME.round_resets.temp_handsize = (G.GAME.round_resets.temp_handsize or 0) - 2
				end
			elseif (next(lh) and next(rh)) and card.ability.missinghands then
				play_sound_q('highlight2', 1, 0.6)
				card:speak('Recovered!', G.C.GREEN)
				card.ability.missinghands = false
				if lh.area and lh.area ~= G.jokers then
					Q(function() draw_card(lh.area, G.jokers, 100, 'up', false, lh) return true end)
				end
				if rh.area and rh.area ~= G.jokers then
					Q(function() draw_card(rh.area, G.jokers, 100, 'up', false, rh) return true end)
				end
			end
			if not card.ability.missinghands then
				if context.first_hand_drawn then
					card:speak(goob_blurbs.addtohand, G.C.CRY_BLOSSOM)
					Q(function()
						if next(lh) and next(rh) then
							if G.hand.config.card_limit < #G.playing_cards and #SMODS.find_card('j_cry_effarcire') then
								local firstcard = G.hand.cards[1]
								local lastcard = G.hand.cards[#G.hand.cards]
								if firstcard then draw_card(firstcard.area, G.deck, 100, 'down', false, firstcard) end
								if lastcard then draw_card(lastcard.area, G.deck, 100, 'down', false, lastcard) end
							end
							draw_card(lh.area, G.hand, 100, 'up', false, lh)
							draw_card(rh.area, G.hand, 100, 'up', false, rh)
							G.hand:change_size(2)
							G.GAME.round_resets.temp_handsize = (G.GAME.round_resets.temp_handsize or 0) + 2
							G.jokers:change_size_absolute(-2)
							Q(function() Q(function() save_run() return true end) return true end)
						end
					return true end)
				elseif context.pre_discard and card.ability.active then
					local to_randomise = {}
					for i = 1, #G.hand.cards do
						local tar = G.hand.cards[i]
						if tar then
							if not tar.highlighted and tar ~= rh and tar:xpos() > rh:xpos() then
								table.insert(to_randomise, tar)
							end
						end
					end
					if #to_randomise > 0 then
						card:speak(goob_blurbs.discard, G.C.BLUE)
						delay(0.5)
						Q(function()
							rh:juice_up(0.5, 0.8)
							play_sound('tarot1')
						return true end)
					end
					jl.randomise(to_randomise)
				end
			end
			if not context.individual and not context.repetition and context.end_of_round then
				if next(lh) and next(rh) and lhih and rhih then
					card:speak(goob_blurbs.hug, G.C.CRY_BLOSSOM)
					local hugging = {}
					for i = 1, #G.hand.cards do
						local tar = G.hand.cards[i]
						if tar then
							if tar ~= lh and tar ~= rh and tar:xpos() > lh:xpos() and tar:xpos() < rh:xpos() then
								table.insert(hugging, tar)
							elseif tar == rh then
								break
							end
						end
					end
					local hands = evaluate_poker_hand(hugging)
					if hands then
						for k, v in pairs(hands) do
							if G.GAME.hands[k] and next(v) then
								for i = 1, #v do
									for ii = 1, #v[i] do
										if type(v[i][ii].highlight) == 'function' then
											Q(function()
												v[i][ii]:highlight(true)
												play_sound('card3')
											return true end, .9)
										end
									end
								end
								delay(0.5)
								jl.th(k)
								for i = 1, #v do
									for ii = 1, #v[i] do
										if type(v[i][ii].highlight) == 'function' then
											local lvmod = (v[i][ii]:norankorsuit() and 0.01 or ((v[i][ii].base.id or 2)/100))
											v[i][ii]:do_jen_astronomy(k, lvmod)
											Q(function() if v[i][ii] then v[i][ii]:juice_up(0.5, 0.8) end return true end)
											fastlv(v[i][ii], k, nil, lvmod)
										end
									end
								end
								delay(0.5)
								for i = 1, #v do
									for ii = 1, #v[i] do
										if type(v[i][ii].highlight) == 'function' then
											Q(function()
												v[i][ii]:highlight(false)
												play_sound('card3', 0.8)
											return true end, .9)
										end
									end
								end
							end
						end
						jl.ch()
					end
				end
				if next(lh) and (lh.area or {}) == G.hand then
					if (lh.area or {}) ~= G.jokers then draw_card(lh.area, G.jokers, 100, 'up', false, lh) end
				else
					if next(lh) then lh:remove_from_deck(); lh:destroy() end
					Q(function()
						local nlh = create_card('Joker', G.jokers, nil, nil, nil, nil, 'j_jen_goob_lefthand', 'goob_nlh')
						nlh:start_materialize({G.C.CHIPS})
						nlh:add_to_deck()
						G.jokers:emplace(nlh)
					return true end)
				end
				if next(rh) and (rh.area or {}) == G.hand then
					if (rh.area or {}) ~= G.jokers then draw_card(rh.area, G.jokers, 100, 'up', false, rh) end
				else
					if next(rh) then rh:remove_from_deck(); rh:destroy() end
					Q(function()
						local nrh = create_card('Joker', G.jokers, nil, nil, nil, nil, 'j_jen_goob_righthand', 'goob_nrh')
						nrh:start_materialize({G.C.MULT})
						nrh:add_to_deck()
						G.jokers:emplace(nrh)
					return true end)
				end
				Q(function() G.jokers:change_size_absolute(2) return true end)
			end
		end
	end
}

SMODS.Joker {
	key = 'goob_righthand',
	loc_txt = {
		name = "Goob's {C:chips}Right Hand",
		text = {
			'{C:blue}Randomise{} all cards to the {C:attention}right',
			'of this card when {C:attention}discarding',
			'No effect if on the left side of the left hand',
			' ',
			faceart('jenwalter666'),
			origin('Dandy\'s World')
		}
	},
	pos = { x = 0, y = 0 },
	soul_pos = { x = 1, y = 0 },
	cost = 0,
	rarity = 'jen_miscellaneous',
	wee_incompatible = true,
	no_doe = true,
	unlocked = true,
	discovered = true,
	immutable = true,
	unique = true,
	uncopyable = true,
	debuff_immune = true,
	unhighlightable = true,
	unchangeable = true,
	blueprint_compat = false,
	eternal_compat = true,
	perishable_compat = false,
	atlas = 'jengoob_righthand'
}'''
position = "at"
payload = '''SMODS.Joker {
	key = 'goob_lefthand',
	loc_txt = {
		name = "Goob's {C:mult}Left Hand{}",
		text = {
			'{C:red}Discard{} all cards to the {C:attention}left',
			'of this card when {C:attention}playing a hand',
			'No effect if on the right side of the right hand',
			' ',
			'{C:dark_edition,s:0.7,E:2}Face art by : jenwalter666',
			"{C:cry_exotic,s:0.7,E:2}Origin : Dandy's World{}"
		}
	},
	pos = { x = 0, y = 0 },
	soul_pos = { x = 1, y = 0 },
	cost = 0,
	rarity = 'jen_miscellaneous',
	no_doe = true,
	unlocked = true,
	discovered = true,
	immutable = true,
	unique = true,
	uncopyable = true,
	debuff_immune = true,
	unhighlightable = true,
	unchangeable = true,
	blueprint_compat = false,
	eternal_compat = true,
	perishable_compat = false,
	atlas = 'jengoob_lefthand'
}

goob_blurbs = {
	addtohand = {
		'Free hugs!',
		'Gorsh!',
		"It's time for hugs!",
		"Come here! Hehehe!",
		"Yyyoop!",
		"Hu-hahahahaha!",
		"Hehehehehe!"
	},
	hug = {
		"Get over here! Teeheehee!",
		"Huuuuug!",
		"Never hugged cards before!",
		"Group hug!",
		"Let's cuddle!",
		"Hugs!",
		"Let me turn that frown upside down!",
		"Hugs are the best medicine to a frown!",
	},
	play = {
		"Sorry, coming through!",
		"Excuse me!",
		"Need to make space!",
		"Sorry, cards!",
		"This way, please!",
		"Swoop!",
		"This is fun!",
		"Cleaning it up!",
		"Don't worry, I'm gentle!",
		"Pardon me!",
		"I apologise!",
		"We need other cards!",
		"I'm sure Scraps will look after those cards!",
		"Don't worry Goob, it's just cards...",
		"Silly me!"
	},
	discard = {
		"How about... this?",
		"Maybe this!",
		"Nope, this one!",
		"Thiiiiis!",
		"How's this fit on you?",
		"Like makeup for paper!",
		"Even cards need to dress to impress!",
		"This is getting better and better!",
		"Hmm...! What would Scraps choose?",
		"This one!",
		"Curvy...!",
		"I like it when it looks perfect!",
		"Let's try this!",
		"This?",
		"Nope, another one...",
		"Nah, this one!",
		"Hmmm...",
		"Decisions, decisions...",
		"I did Scraps's makeup, but this is hard!",
		"Oops, maybe this one..."
	},
	hands_lost = {
		"Oof!",
		"D'aaooww!",
		"Aaagh!",
		"My hands!",
		"Owww!",
		"Aaoowww!",
		"AAAAA-hoo-hoo-hooiee!",
		"Geeeoowwwch!"
	}
}

SMODS.Joker {
	key = 'goob',
	loc_txt = {
		name = '{C:chips,s:1.21}G{C:mult,s:0.79}o{C:chips,s:1.3}o{C:mult,s:0.9}b',
		text = {
			'After drawing the {C:attention}first hand{}, this Joker',
			'{C:attention}replaces the leftmost and rightmost',
			'playing cards back into the deck and',
			'{C:attention}places his {C:chips}h{C:mult}a{C:chips}n{C:mult}d{C:chips}s{} into your hand',
			'At the {C:attention}end of round{},',
			'the cards {C:attention}inbetween this Joker\'s {C:chips}h{C:mult}a{C:chips}n{C:mult}d{C:chips}s',
			'will {C:planet}upgrade your poker hands{} based on what poker hands',
			'{C:attention}could be made{} with those cards from {C:attention}all the possible choices',
			'{s:1.5,C:red}#1#',
			"{C:inactive,s:0.9,E:1}He's a goofy goober; one who shows the kids that",
			"{C:inactive,s:0.9,E:1}hugs are one of the best medicines for a frown!{}",
			'{C:dark_edition,s:0.7,E:2}Face art by : jenwalter666',
			"{C:cry_exotic,s:0.7,E:2}Origin : Dandy's World{}"
		}
	},
	config = {active = false, missinghands = false},
	pos = { x = 0, y = 0 },
	soul_pos = { x = 1, y = 0 },
	cost = 12,
	rarity = 'cry_epic',
	unlocked = true,
	discovered = true,
	experimental = true,
	longful = true,
	immutable = true,
	debuff_immune = true,
	blueprint_compat = false,
	eternal_compat = true,
	perishable_compat = false,
	immune_to_vermillion = true,
	unique = true,
	atlas = 'jengoob',
    loc_vars = function(self, info_queue, center)
		local qty = voucherscount()
        return {vars = {center.ability.missinghands and 'Incapacitated! End a round to recover this Joker.' or ''}}
    end,
	update = function(self, card, front)
		if card.added_to_deck then
			if card.children.floating_sprite and card.children.center then
				if card.ability.missinghands then
					card.children.center:set_sprite_pos({x = 0, y = 1})
					card.children.floating_sprite:set_sprite_pos({x = 3, y = 0})
				elseif ((G.GAME or {}).blind or {}).in_blind and card.ability.active then
					card.children.center:set_sprite_pos({x = 0, y = 0})
					card.children.floating_sprite:set_sprite_pos({x = 2, y = 0})
				else
					card.children.center:set_sprite_pos({x = 0, y = 0})
					card.children.floating_sprite:set_sprite_pos({x = 1, y = 0})
				end
			end
			if card.ability and G.hand then
				local lh = jl.fc('j_jen_goob_lefthand', 'all') or {}
				local rh = jl.fc('j_jen_goob_righthand', 'all') or {}
				card.ability.active = ((G.GAME or {}).blind or {}).in_blind and G.STATE == G.STATES.SELECTING_HAND and next(lh) and next(rh) and rh:xpos() > lh:xpos()
			end
			if ((G.GAME or {}).blind or {}).in_blind and not card.ability.missinghands and not card.goob_failsafe_activate then
				if #G.hand.cards <= 2 and card.ability.active then
					card.goob_failsafe_activate = true
					if #G.deck.cards > 0 then
						draw_card(G.deck, G.hand, 100, 'up')
						Q(function() if card then card.goob_failsafe_activate = nil end return true end)
					end
				end
			end
		end
	end,
	add_to_deck = function(self, card, from_debuff)
		if not from_debuff and #SMODS.find_card('j_jen_goob', true) <= 0 then
			local leftie = jl.fc('j_jen_goob_lefthand', 'all')
			if leftie then leftie:destroy() end
			local rightie = jl.fc('j_jen_goob_righthand', 'all')
			if rightie then rightie:destroy() end
			local lh = create_card('Joker', G.jokers, nil, nil, nil, nil, 'j_jen_goob_lefthand', 'goob_lh')
			lh:start_materialize({G.C.CHIPS})
			lh:add_to_deck()
			G.jokers:emplace(lh)
			card.ability.left_hand = lh.sort_id
			local rh = create_card('Joker', G.jokers, nil, nil, nil, nil, 'j_jen_goob_righthand', 'goob_rh')
			rh:add_to_deck({G.C.MULT})
			card.ability.right_hand = rh.sort_id
			G.jokers:emplace(rh)
			G.jokers:change_size_absolute(2)
		end
	end,
	remove_from_deck = function(self, card, from_debuff)
		if not from_debuff and #SMODS.find_card('j_jen_goob', true) <= 1 then
			local leftie = jl.fc('j_jen_goob_lefthand', 'all')
			if leftie then leftie:destroy() end
			local rightie = jl.fc('j_jen_goob_righthand', 'all')
			if rightie then rightie:destroy() end
			if ((G.GAME or {}).blind or {}).in_blind then
				G.hand:change_size(-2)
				G.GAME.round_resets.temp_handsize = (G.GAME.round_resets.temp_handsize or 0) - 2
			end
			G.jokers:change_size_absolute(-2)
		end
	end,
    calculate = function(self, card, context)
		if not context.blueprint and jl.njr(context) and not context.jen_adding_card then
			local lh = jl.fc('j_jen_goob_lefthand', 'all') or {}
			local rh = jl.fc('j_jen_goob_righthand', 'all') or {}
			local lhih = (lh.area or {}) == G.hand
			local rhih = (rh.area or {}) == G.hand
			if not (next(lh) and next(rh)) and not card.ability.missinghands then
				play_sound_q('jen_hurt' .. math.random(3))
				card:speak(goob_blurbs.hands_lost, G.C.RED)
				card.ability.missinghands = true
				if ((G.GAME or {}).blind or {}).in_blind then
					G.hand:change_size(-2)
					G.GAME.round_resets.temp_handsize = (G.GAME.round_resets.temp_handsize or 0) - 2
				end
			elseif (next(lh) and next(rh)) and card.ability.missinghands then
				play_sound_q('highlight2', 1, 0.6)
				card:speak('Recovered!', G.C.GREEN)
				card.ability.missinghands = false
				if lh.area and lh.area ~= G.jokers then
					Q(function() draw_card(lh.area, G.jokers, 100, 'up', false, lh) return true end)
				end
				if rh.area and rh.area ~= G.jokers then
					Q(function() draw_card(rh.area, G.jokers, 100, 'up', false, rh) return true end)
				end
			end
			if not card.ability.missinghands then
				if context.setting_blind then
					card:speak(goob_blurbs.addtohand, G.C.CRY_BLOSSOM)
					Q(function()
						if next(lh) and next(rh) then
							if G.hand.config.card_limit < #G.playing_cards or #SMODS.find_card('j_cry_effarcire') then
								local firstcard = G.hand.cards[1]
								local lastcard = G.hand.cards[#G.hand.cards]
								if firstcard then draw_card(firstcard.area, G.deck, 100, 'down', false, firstcard) end
								if lastcard then draw_card(lastcard.area, G.deck, 100, 'down', false, lastcard) end
							end
							draw_card(lh.area, G.hand, 100, 'up', false, lh)
							draw_card(rh.area, G.hand, 100, 'up', false, rh)
							G.hand:change_size(2)
							G.GAME.round_resets.temp_handsize = (G.GAME.round_resets.temp_handsize or 0) + 2
							G.jokers:change_size_absolute(-2)
							Q(function() Q(function() save_run() return true end) return true end)
						end
					return true end)
				elseif context.pre_discard and card.ability.active then
					local to_randomise = {}
					for i = 1, #G.hand.cards do
						local tar = G.hand.cards[i]
						if tar then
							if not tar.highlighted and tar ~= rh and tar:xpos() > rh:xpos() then
								table.insert(to_randomise, tar)
							end
						end
					end
					if #to_randomise > 0 then
						card:speak(goob_blurbs.discard, G.C.BLUE)
						delay(0.5)
						Q(function()
							rh:juice_up(0.5, 0.8)
							play_sound('tarot1')
						return true end)
					end
					jl.randomise(to_randomise)
				end
			end
			if not context.individual and not context.repetition and context.end_of_round then
				if next(lh) and next(rh) and lhih and rhih then
					card:speak(goob_blurbs.hug, G.C.CRY_BLOSSOM)
					local hugging = {}
					for i = 1, #G.hand.cards do
						local tar = G.hand.cards[i]
						if tar then
							if tar ~= lh and tar ~= rh and tar:xpos() > lh:xpos() and tar:xpos() < rh:xpos() then
								table.insert(hugging, tar)
							elseif tar == rh then
								break
							end
						end
					end
					local hands = evaluate_poker_hand(hugging)
					if hands then
						for k, v in pairs(hands) do
							if G.GAME.hands[k] and next(v) then
								for i = 1, #v do
									for ii = 1, #v[i] do
										if type(v[i][ii].highlight) == 'function' then
											Q(function()
												v[i][ii]:highlight(true)
												play_sound('card3')
											return true end, 0.5)
										end
									end
								end
								delay(0.5)
								for i = 1, #v do
									for ii = 1, #v[i] do
										if type(v[i][ii].highlight) == 'function' then
											local lvmod = (v[i][ii]:norankorsuit() and 0.01 or ((v[i][ii].base.id or 2)/100))
											v[i][ii]:do_jen_astronomy(k, lvmod)
											jl.th(k)
											fastlv(v[i][ii], k, nil, lvmod)
										end
									end
								end
								delay(0.5)
								for i = 1, #v do
									for ii = 1, #v[i] do
										if type(v[i][ii].highlight) == 'function' then
											Q(function()
												v[i][ii]:highlight(false)
												play_sound('card3', 0.8)
											return true end, 0.5)
										end
									end
								end
							end
						end
						jl.ch()
					end
				end
				if next(lh) and (lh.area or {}) == G.hand then
					if (lh.area or {}) ~= G.jokers then draw_card(lh.area, G.jokers, 100, 'up', false, lh) end
				else
					if next(lh) then lh:remove_from_deck(); lh:destroy() end
					Q(function()
						local nlh = create_card('Joker', G.jokers, nil, nil, nil, nil, 'j_jen_goob_lefthand', 'goob_nlh')
						nlh:start_materialize({G.C.CHIPS})
						nlh:add_to_deck()
						G.jokers:emplace(nlh)
					return true end)
				end
				if next(rh) and (rh.area or {}) == G.hand then
					if (rh.area or {}) ~= G.jokers then draw_card(rh.area, G.jokers, 100, 'up', false, rh) end
				else
					if next(rh) then rh:remove_from_deck(); rh:destroy() end
					Q(function()
						local nrh = create_card('Joker', G.jokers, nil, nil, nil, nil, 'j_jen_goob_righthand', 'goob_nrh')
						nrh:start_materialize({G.C.MULT})
						nrh:add_to_deck()
						G.jokers:emplace(nrh)
					return true end)
				end
				Q(function() G.jokers:change_size_absolute(2) return true end)
			end
		end
	end
}

SMODS.Joker {
	key = 'goob_righthand',
	loc_txt = {
		name = "Goob's {C:chips}Right Hand{}",
		text = {
			'{C:blue}Randomise{} all cards to the {C:attention}right',
			'of this card when {C:attention}discarding',
			'No effect if on the left side of the left hand',
			' ',
			'{C:dark_edition,s:0.7,E:2}Face art by : jenwalter666',
			"{C:cry_exotic,s:0.7,E:2}Origin : Dandy's World{}"
		}
	},
	pos = { x = 0, y = 0 },
	soul_pos = { x = 1, y = 0 },
	cost = 0,
	rarity = 'jen_miscellaneous',
	no_doe = true,
	unlocked = true,
	discovered = true,
	immutable = true,
	unique = true,
	uncopyable = true,
	debuff_immune = true,
	unhighlightable = true,
	unchangeable = true,
	blueprint_compat = false,
	eternal_compat = true,
	perishable_compat = false,
	atlas = 'jengoob_righthand'
}'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''SMODS.Joker {
		key = 'godsmarble',
		loc_txt = {
			name = 'Godsmarble',
			text = {
				'{C:dark_edition,s:2.5,E:1}???',
				' ',
				lore('An otherworldly artefact in CRAFTWORLD that exerts'),
				lore('incomprehensible levels of unbearable pain'),
				lore('to everything within a one kilometre radius'),
				lore('around itself, though it seems to be tame'),
				lore('towards a very few selection of beings,'),
				lore('like Kosmos or Jen Walter.'),
				faceart('jenwalter666'),
				origin('CRAFTWORLD')
			}
		},
		pos = { x = 0, y = 0 },
		soul_pos = { x = 1, y = 0 },
		fusable = true,
		cost = 3,
		rarity = 3,
		unlocked = true,
		discovered = true,
		unique = true,
		debuff_immune = true,
		blueprint_compat = false,
		eternal_compat = true,
		perishable_compat = false,
		immutable = true,
		wee_incompatible = true,
		abilitycard = 'c_jen_fuse',
		atlas = 'jengodsmarble',
		add_to_deck = function(self, card, from_debuff)
			if not from_debuff then
				ease_ante(1)
			end
		end,
		remove_from_deck = function(self, card, from_debuff)
			if not from_debuff then
				ease_ante(-1)
			end
		end
	}'''
position = "at"
payload = '''
SMODS.Joker {
    key = 'godsmarble',
    loc_txt = {
        name = 'Godsmarble',
        text = {
            '{C:dark_edition,s:2.5,E:1}???',
            ' ',
            lore('An otherworldly artefact in CRAFTWORLD that exerts'),
            lore('incomprehensible levels of unbearable pain'),
            lore('to everything within a one kilometre radius'),
            lore('around itself, though it seems to be tame'),
            lore('towards a very few selection of beings,'),
            lore('like Kosmos or Jen Walter.'),
            faceart('jenwalter666'),
            origin('CRAFTWORLD')
        }
    },
    pos = { x = 0, y = 0 },
    soul_pos = { x = 1, y = 0 },
    fusable = true,
    cost = 3,
    rarity = 3,
    unlocked = true,
    discovered = true,
    unique = true,
    debuff_immune = true,
    blueprint_compat = false,
    eternal_compat = true,
    perishable_compat = false,
    immutable = true,
    wee_incompatible = true,
    abilitycard = 'c_jen_fuse',
    atlas = 'jengodsmarble',
    add_to_deck = function(self, card, from_debuff)
        if not from_debuff then
            ease_ante(1)
        end
    end,
    remove_from_deck = function(self, card, from_debuff)
        if not from_debuff then
            ease_ante(-1)
        end
    end
}'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''	SMODS.Joker {
		key = 'pawn',
		loc_txt = {
			name = '{C:green}The Pawn of Pandemonium',
			text = {
				'{C:clubs}Clubs{} give',
				jl.tetmult('#1#') .. ' Mult when scored',
				' ',
				lore('See no evil.'),
				faceart('raidoesthings')
			}
		},
		config = {
			tet = 1.5
		},
		pos = { x = 0, y = 0 },
		soul_pos = { x = 1, y = 0, extra = { x = 2, y = 0 }},
		no_doe = true,
		cost = 125,
		rarity = 'jen_ritualistic',
		unlocked = true,
		discovered = true,
		blueprint_compat = true,
		eternal_compat = true,
		perishable_compat = false,
		immutable = true,
		unique = true,
		debuff_immune = true,
		atlas = 'jenpawn',
		loc_vars = function(self, info_queue, center)
			return {vars = {
				center.ability.tet
			}}
		end,
		calculate = function(self, card, context)
			if context.individual and context.cardarea == G.play then
				if context.other_card:is_suit('Clubs') then
					return {
						ee_mult = card.ability.tet,
						colour = G.C.jen_RGB,
						card = card
					}, true
				end
			end
		end
	}'''
position = "at"
payload = '''
SMODS.Joker {
    key = 'pawn',
    loc_txt = {
        name = '{C:green}The Pawn of Pandemonium',
        text = {
            '{C:clubs}Clubs{} give',
            jl.tetmult('#1#') .. ' Mult when scored',
            ' ',
            lore('See no evil.'),
            faceart('raidoesthings')
        }
    },
    config = {
        tet = 1.5
    },
    pos = { x = 0, y = 0 },
    soul_pos = { x = 1, y = 0, extra = { x = 2, y = 0 }},
    no_doe = true,
    cost = 125,
    rarity = 'jen_ritualistic',
    unlocked = true,
    discovered = true,
    blueprint_compat = true,
    eternal_compat = true,
    perishable_compat = false,
    immutable = true,
    unique = true,
    debuff_immune = true,
    atlas = 'jenpawn',
    loc_vars = function(self, info_queue, center)
        return {vars = {
            center.ability.tet
        }}
    end,
    calculate = function(self, card, context)
        if context.individual and context.cardarea == G.play then
            if context.other_card:is_suit('Clubs') then
                return {
                    ee_mult = card.ability.tet,
                    colour = G.C.jen_RGB,
                    card = card
                }, true
            end
        end
    end
}'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''SMODS.Joker {
	key = 'astro',
	loc_txt = {
		name = '{C:cry_twilight}Astro',
		text = {
			'{C:planet}Hand level-ups{} have an {C:green}initial #1#% chance{} to {C:attention}repeat',
			'Repetitions {C:attention}continue until the chance fails',
			'Repetition chance decreases by {C:red}' .. Jen.config.astro.decrement * 100 .. '%{} per success,',
			'{C:attention}resets to initial chance{} after failure',
			'Using {C:attention}non-{C:dark_edition}Negative {C:planet}Neutron Stars{}, {C:red}visibly leveling down hands',
			'or {C:attention}applying editions to hands with {C:planet}Planets{} increases the {C:green}initial chance{} by {C:attention}+' .. Jen.config.astro.increment * 100 .. '%{}, up to a {C:attention}maximum of 100%',
			'If {C:green}initial chance{} is {C:attention}100%{}, the decrease on repetition chance is {C:attention}reduced to ' .. Jen.config.astro.decrement * 50 .. '%',
			'{C:inactive,s:0.8}(Chance upgrades and repetition processes are retriggerable)',
			'{C:inactive,s:0.8}(Chance decrease is ' .. Jen.config.astro.retrigger_mod .. 'x stronger during retriggers)',
			'{C:inactive,s:0.8}(Unaffected by probability alterations, ex. Oops! All 6s)',
			' ',
			"{C:inactive,s:0.9,E:1}*Dandy's closest friend! ...Right?*",
			faceart('jenwalter666'),
			origin('Dandy\'s World')
		}
	},
	config = {neutrons = 0, maxed = false},
	pos = { x = 0, y = 0 },
	soul_pos = { x = 1, y = 0 },
	cost = 50,
	rarity = 'cry_exotic',
	dangerous = true,
	unlocked = true,
	discovered = true,
	immutable = true,
	blueprint_compat = false,
	eternal_compat = true,
	perishable_compat = false,
	unique = true,
	wee_incompatible = true,
	atlas = 'jenastro',
	loc_vars = function(self, info_queue, center)
		return {vars = {center.ability.maxed and 100 or ((Jen.config.astro.initial + (Jen.config.astro.increment * center.ability.neutrons)) * 100)}}
	end,
    calculate = function(self, card, context)
		if not context.blueprint_card and not context.destroying_card and not context.cry_ease_dollars and not context.post_trigger then
			if context.jen_lving and context.card then
				if not card.ability.maxed and context.lvs < 0 and not context.lv_instant then
					card:speak(localize('k_upgrade_ex'), G.C.CRY_ASCENDANT)
					card.ability.neutrons = card.ability.neutrons - context.lvs
					if (Jen.config.astro.initial + (Jen.config.astro.increment * card.ability.neutrons)) >= 1 then
						card.ability.maxed = true
						card_status_text(card, 'Maxed out!', nil, 0.05*card.T.h, G.C.EDITION, 0.6, 0.6, 2, 2, 'bm', 'jen_enlightened')
					end
					return nil, true
				elseif not context.card.astro_in_effect then
					context.card.astro_in_effect = true
					local odds = math.min(1, card.ability.maxed and 1 or (Jen.config.astro.initial + (Jen.config.astro.increment * card.ability.neutrons)))
					if context.lvs and context.lvs > 0 then
						local times = 0
						local firstpass = false
						if jl.njr(context) then 
							card:speak(astro_blurbs, G.C.CRY_TWILIGHT)
						else
							card:speak(localize('k_again_ex'))
						end
						while true do
							if odds >= 1 or (odds > 0 and jl.chance('astro_rng', 1/odds, true)) then
								times = times + 1
								odds = odds - ((Jen.config.astro.decrement / (card.ability.maxed and 2 or 1) * (context.retrigger_joker and Jen.config.astro.retrigger_mod or 1)))
							else
								if times > 0 then
									if context.card and context.card.speak then context.card:speak('x' .. times, G.C.CRY_TWILIGHT) else card:speak('x' .. times, G.C.CRY_TWILIGHT) end
									level_up_hand(context.card, context.lv_hand, context.lv_instant, context.lvs * times, true, true, true)
									add_malice(5 * context.lvs * times)
								else
									if context.card and context.card.speak then context.card:speak(localize('k_nope_ex'), G.C.FILTER) else card:speak(localize('k_nope_ex'), G.C.FILTER) end
								end
								break
							end
						end
					end
					if not card.ability.maxed and context.card and context.card.gc and context.card:gc().set == 'Planet' and (context.card:gc().key == 'c_cry_nstar' or next((context.card.edition or {}))) and not (context.card.edition or {}).negative then
						card:speak(localize('k_upgrade_ex'), G.C.CRY_ASCENDANT)
						card.ability.neutrons = card.ability.neutrons + context.card:getEvalQty()
						if (Jen.config.astro.initial + (Jen.config.astro.increment * card.ability.neutrons)) >= 1 then
							card.ability.maxed = true
							card_status_text(card, 'Maxed out!', nil, 0.05*card.T.h, G.C.EDITION, 0.6, 0.6, 2, 2, 'bm', 'jen_enlightened')
						end
					end
					context.card.astro_in_effect = nil
					return nil, true
				end
			end
		end
	end
}'''
position = 'at'
payload = '''SMODS.Joker {
	key = 'astro',
	loc_txt = {
		name = '{C:cry_twilight}Astro',
		text = {
			'{C:planet}Hand level-ups{} have an {C:green}initial #1#% chance{} to {C:attention}repeat',
			'Repetitions {C:attention}continue until the chance fails',
			'Repetition chance decreases by {C:red}' .. Jen.config.astro.decrement * 100 .. '%{} per success,',
			'{C:attention}resets to initial chance{} after failure',
			'Using {C:attention}non-{C:dark_edition}Negative {C:planet}Neutron Stars{}, {C:red}visibly leveling down hands',
			'or {C:attention}applying editions to hands with {C:planet}Planets{} increases the {C:green}initial chance{} by {C:attention}+' .. Jen.config.astro.increment * 100 .. '%{}, up to a {C:attention}maximum of 100%',
			'If {C:green}initial chance{} is {C:attention}100%{}, the decrease on repetition chance is {C:attention}reduced to ' .. Jen.config.astro.decrement * 50 .. '%',
			'{C:inactive,s:0.8}(Chance upgrades and repetition processes are retriggerable)',
			'{C:inactive,s:0.8}(Chance decrease is ' .. Jen.config.astro.retrigger_mod .. 'x stronger during retriggers)',
			'{C:inactive,s:0.8}(Unaffected by probability alterations, ex. Oops! All 6s)',
			' ',
			"{C:inactive,s:0.9,E:1}*Dandy's closest friend! ...Right?*",
			faceart('jenwalter666'),
			origin('Dandy\'s World')
		}
	},
	config = {neutrons = 0, maxed = false},
	pos = { x = 0, y = 0 },
	soul_pos = { x = 1, y = 0 },
	cost = 50,
	rarity = 'cry_exotic',
	dangerous = true,
	unlocked = true,
	discovered = true,
	immutable = true,
	blueprint_compat = false,
	eternal_compat = true,
	perishable_compat = false,
	unique = true,
	wee_incompatible = true,
	atlas = 'jenastro',
	loc_vars = function(self, info_queue, center)
		return {vars = {center.ability.maxed and 100 or ((Jen.config.astro.initial + (Jen.config.astro.increment * center.ability.neutrons)) * 100)}}
	end,
    calculate = function(self, card, context)
		if not context.blueprint_card and not context.destroying_card and not context.cry_ease_dollars and not context.post_trigger then
			if context.jen_lving and context.card then
				if not card.ability.maxed and to_big(context.lvs) < to_big(0) and not context.lv_instant then
					card:speak(localize('k_upgrade_ex'), G.C.CRY_ASCENDANT)
					card.ability.neutrons = card.ability.neutrons - context.lvs
					if (Jen.config.astro.initial + (Jen.config.astro.increment * card.ability.neutrons)) >= 1 then
						card.ability.maxed = true
						card_status_text(card, 'Maxed out!', nil, 0.05*card.T.h, G.C.EDITION, 0.6, 0.6, 2, 2, 'bm', 'jen_enlightened')
					end
					return nil, true
				elseif not context.card.astro_in_effect then
					context.card.astro_in_effect = true
					local odds = math.min(1, card.ability.maxed and 1 or (Jen.config.astro.initial + (Jen.config.astro.increment * card.ability.neutrons)))
					if context.lvs and to_big(context.lvs) > to_big(0) then
						local times = 0
						local firstpass = false
						if jl.njr(context) then 
							card:speak(astro_blurbs, G.C.CRY_TWILIGHT)
						else
							card:speak(localize('k_again_ex'))
						end
						while true do
							if odds >= 1 or (odds > 0 and jl.chance('astro_rng', 1/odds, true)) then
								times = times + 1
								odds = odds - ((Jen.config.astro.decrement / (card.ability.maxed and 2 or 1) * (context.retrigger_joker and Jen.config.astro.retrigger_mod or 1)))
							else
								if times > 0 then
									if context.card and context.card.speak then context.card:speak('x' .. times, G.C.CRY_TWILIGHT) else card:speak('x' .. times, G.C.CRY_TWILIGHT) end
									level_up_hand(context.card, context.lv_hand, context.lv_instant, context.lvs * times, true, true, true)
									add_malice(5 * context.lvs * times)
								else
									if context.card and context.card.speak then context.card:speak(localize('k_nope_ex'), G.C.FILTER) else card:speak(localize('k_nope_ex'), G.C.FILTER) end
								end
								break
							end
						end
					end
					if not card.ability.maxed and context.card and context.card.gc and context.card:gc().set == 'Planet' and (context.card:gc().key == 'c_cry_nstar' or next((context.card.edition or {}))) and not (context.card.edition or {}).negative then
						card:speak(localize('k_upgrade_ex'), G.C.CRY_ASCENDANT)
						card.ability.neutrons = card.ability.neutrons + context.card:getEvalQty()
						if (Jen.config.astro.initial + (Jen.config.astro.increment * card.ability.neutrons)) >= 1 then
							card.ability.maxed = true
							card_status_text(card, 'Maxed out!', nil, 0.05*card.T.h, G.C.EDITION, 0.6, 0.6, 2, 2, 'bm', 'jen_enlightened')
						end
					end
					context.card.astro_in_effect = nil
					return nil, true
				end
			end
		end
	end
}'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''	SMODS.Joker {
		key = 'wondergeist',
		loc_txt = {
			name = 'Jen Walter the Wondergeist',
			text = {
				'{C:attention}Poker hands{} gain',
				'{X:jen_RGB,C:white,s:3}^^2{} Chips and Mult',
				'when leveled up',
				' ',
				'{C:inactive,s:1.25,E:1}i feel... otherworldly...!',
				faceart('jenwalter666'),
				origin('CRAFTWORLD')
			}
		},
		config = {},
		pos = { x = 0, y = 0 },
		soul_pos = { x = 1, y = 0, extra = { x = 2, y = 0 }},
		fusable = true,
		no_doe = true,
		cost = 5e5,
		unique = true,
		rarity = 'jen_transcendent',
		unlocked = true,
		discovered = true,
		blueprint_compat = false,
		eternal_compat = true,
		perishable_compat = false,
		permaeternal = true,
		immutable = true,
		unique = true,
		debuff_immune = true,
		atlas = 'jenwondergeist',
		calculate = function(self, card, context)
			if not context.cry_ease_dollars and not context.post_trigger and context.jen_lving then
				if context.lvs > 0 then
					local iterations = math.min(1e3, context.lvs)
					for i = 1, iterations do
						G.GAME.hands[context.lv_hand].chips = to_big(G.GAME.hands[context.lv_hand].chips):arrow(2, 2)
						G.GAME.hands[context.lv_hand].mult = to_big(G.GAME.hands[context.lv_hand].mult):arrow(2, 2)
					end
					if not context.lv_instant then
						delay(0.5)
						Q(function() card:juice_up(1, 1) return true end)
						play_sound_q('talisman_eechip')
						play_sound_q('talisman_eemult')
						jl.hcm('^^2 (x' .. iterations .. ')', '^^2 (x' .. iterations .. ')', true)
						jl.hcm(G.GAME.hands[context.lv_hand].chips, G.GAME.hands[context.lv_hand].mult)
						delay(0.5)
					end
				end
				return nil, true
			end
		end
	}'''
position = 'at'
payload = '''	SMODS.Joker {
		key = 'wondergeist',
		loc_txt = {
			name = 'Jen Walter the Wondergeist',
			text = {
				'{C:attention}Poker hands{} gain',
				'{X:jen_RGB,C:white,s:3}^^2{} Chips and Mult',
				'when leveled up',
				' ',
				'{C:inactive,s:1.25,E:1}i feel... otherworldly...!',
				faceart('jenwalter666'),
				origin('CRAFTWORLD')
			}
		},
		config = {},
		pos = { x = 0, y = 0 },
		soul_pos = { x = 1, y = 0, extra = { x = 2, y = 0 }},
		fusable = true,
		no_doe = true,
		cost = 5e5,
		unique = true,
		rarity = 'jen_transcendent',
		unlocked = true,
		discovered = true,
		blueprint_compat = false,
		eternal_compat = true,
		perishable_compat = false,
		permaeternal = true,
		immutable = true,
		unique = true,
		debuff_immune = true,
		atlas = 'jenwondergeist',
		calculate = function(self, card, context)
			if not context.cry_ease_dollars and not context.post_trigger and context.jen_lving then
				if to_big(context.lvs) > to_big(0) then
					local iterations = math.min(1e3, to_big(context.lvs))
					for i = 1, #iterations do
						G.GAME.hands[context.lv_hand].chips = to_big(G.GAME.hands[context.lv_hand].chips):arrow(2, 2)
						G.GAME.hands[context.lv_hand].mult = to_big(G.GAME.hands[context.lv_hand].mult):arrow(2, 2)
					end
					if not context.lv_instant then
						delay(0.5)
						Q(function() card:juice_up(1, 1) return true end)
						play_sound_q('talisman_eechip')
						play_sound_q('talisman_eemult')
						jl.hcm('^^2 (x' .. iterations .. ')', '^^2 (x' .. iterations .. ')', true)
						jl.hcm(G.GAME.hands[context.lv_hand].chips, G.GAME.hands[context.lv_hand].mult)
						delay(0.5)
					end
				end
				return nil, true
			end
		end
	}'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''	SMODS.Joker {
		key = 'wondergeist2',
		loc_txt = {
			name = 'Jen Walter the Wondergeist {C:cry_ember}(Ascended)',
			text = {
				'{C:attention}Poker hands{} gain',
				'{X:black,C:red,s:4}^^^3{} Chips & Mult',
				'when leveled up',
				' ',
				"{C:inactive,s:1.25,E:1}my body feels so... delicate, but strong at the same time...?",
				faceart('jenwalter666'),
				origin('CRAFTWORLD')
			}
		},
		pos = { x = 0, y = 0 },
		soul_pos = { x = 1, y = 0, extra = { x = 2, y = 0 }},
		no_doe = true,
		cost = 5e8,
		unique = true,
		rarity = 'jen_transcendent',
		unlocked = true,
		discovered = true,
		blueprint_compat = false,
		eternal_compat = true,
		perishable_compat = false,
		permaeternal = true,
		immutable = true,
		unique = true,
		debuff_immune = true,
		atlas = 'jenwondergeist2',
		calculate = function(self, card, context)
			if not context.cry_ease_dollars and not context.post_trigger and context.jen_lving then
				if context.lvs > 0 then
					local iterations = math.min(1e3, context.lvs)
					for i = 1, iterations do
						G.GAME.hands[context.lv_hand].chips = to_big(G.GAME.hands[context.lv_hand].chips):arrow(3, 3)
						G.GAME.hands[context.lv_hand].mult = to_big(G.GAME.hands[context.lv_hand].mult):arrow(3, 3)
					end
					if not context.lv_instant then 
						delay(0.5)
						Q(function() card:juice_up(2, 2) return true end)
						play_sound_q('talisman_eeechip')
						play_sound_q('talisman_eeemult')
						jl.hcm('^^^3 (x' .. iterations .. ')', '^^^3 (x' .. iterations .. ')', true)
						jl.hcm(G.GAME.hands[context.lv_hand].chips, G.GAME.hands[context.lv_hand].mult)
						delay(0.5)
					end
				end
				return nil, true
			end
		end
	}'''
position = 'at'
payload = '''	SMODS.Joker {
		key = 'wondergeist2',
		loc_txt = {
			name = 'Jen Walter the Wondergeist {C:cry_ember}(Ascended)',
			text = {
				'{C:attention}Poker hands{} gain',
				'{X:black,C:red,s:4}^^^3{} Chips & Mult',
				'when leveled up',
				' ',
				"{C:inactive,s:1.25,E:1}my body feels so... delicate, but strong at the same time...?",
				faceart('jenwalter666'),
				origin('CRAFTWORLD')
			}
		},
		pos = { x = 0, y = 0 },
		soul_pos = { x = 1, y = 0, extra = { x = 2, y = 0 }},
		no_doe = true,
		cost = 5e8,
		unique = true,
		rarity = 'jen_transcendent',
		unlocked = true,
		discovered = true,
		blueprint_compat = false,
		eternal_compat = true,
		perishable_compat = false,
		permaeternal = true,
		immutable = true,
		unique = true,
		debuff_immune = true,
		atlas = 'jenwondergeist2',
		calculate = function(self, card, context)
			if not context.cry_ease_dollars and not context.post_trigger and context.jen_lving then
				if to_big(context.lvs) > to_big(0) then
					local iterations = math.min(1e3, to_big(context.lvs))
					for i = 1, #iterations do
						G.GAME.hands[context.lv_hand].chips = to_big(G.GAME.hands[context.lv_hand].chips):arrow(3, 3)
						G.GAME.hands[context.lv_hand].mult = to_big(G.GAME.hands[context.lv_hand].mult):arrow(3, 3)
					end
					if not context.lv_instant then 
						delay(0.5)
						Q(function() card:juice_up(2, 2) return true end)
						play_sound_q('talisman_eeechip')
						play_sound_q('talisman_eeemult')
						jl.hcm('^^^3 (x' .. iterations .. ')', '^^^3 (x' .. iterations .. ')', true)
						jl.hcm(G.GAME.hands[context.lv_hand].chips, G.GAME.hands[context.lv_hand].mult)
						delay(0.5)
					end
				end
				return nil, true
			end
		end
	}'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''SMODS.Joker {
	key = 'landa',
	loc_txt = {
		name = 'Landa Veris',
		text = {
			'Gives {X:purple,C:dark_edition}^Chips&Mult{} according',
			'to {C:attention}(number of Jokers + 1){} multiplied by',
			'{C:attention}((cards in deck / 100) + 1)',
			'{C:inactive}(Currently {X:purple,C:dark_edition}^#1#{C:inactive})',
			' ',
			"{C:inactive,E:1}#2#{}{C:red,E:1}#4#",
			"{C:inactive,E:1}#3#",
			faceart('laviolive')
		}
	},
	pos = { x = 0, y = 0 },
	soul_pos = { x = 1, y = 0 },
	sinis = { x = 2, y = 0 },
	cost = 50,
	rarity = 'cry_exotic',
	fusable = true,
	unlocked = true,
	discovered = true,
	blueprint_compat = true,
	eternal_compat = true,
	perishable_compat = false,
	wee_incompatible = true,
	immutable = true,
	atlas = 'jenlanda',
    loc_vars = function(self, info_queue, center)
        return {vars = {number_format(landa_mod()), Jen.sinister and '' or Jen.gods() and 'That... thing...' or 'I must do what I must-...', Jen.sinister and '' or Jen.gods() and '...have I seen it before?' or '...-w-wait, was that REALLY my line?', Jen.sinister and 'OH GOD, OH NO, OH FU-!!' or ''}}
    end,
    calculate = function(self, card, context)
		if context.cardarea == G.jokers and not context.before and not context.after and context.scoring_name then
			local mod = landa_mod()
			return {
				message = '^' .. mod .. ' Chips & Mult',
				Echip_mod = mod,
				Emult_mod = mod,
				colour = G.C.PURPLE,
				card = card
			}, true
		end
	end
}'''
position = 'at'
payload = '''SMODS.Joker {
	key = 'landa',
	loc_txt = {
		name = 'Landa Veris',
		text = {
			'Gives {X:purple,C:dark_edition}^Chips&Mult{} according',
			'to {C:attention}(number of Jokers + 1){} multiplied by',
			'{C:attention}((cards in deck / 100) + 1)',
			'{C:inactive}(Currently {X:purple,C:dark_edition}^#1#{C:inactive})',
			' ',
			"{C:inactive,E:1}#2#{}{C:red,E:1}#4#",
			"{C:inactive,E:1}#3#",
			faceart('laviolive')
		}
	},
	pos = { x = 0, y = 0 },
	soul_pos = { x = 1, y = 0 },
	sinis = { x = 2, y = 0 },
	cost = 50,
	rarity = 'cry_exotic',
	fusable = true,
	unlocked = true,
	discovered = true,
	blueprint_compat = true,
	eternal_compat = true,
	perishable_compat = false,
	wee_incompatible = true,
	immutable = true,
	atlas = 'jenlanda',
    loc_vars = function(self, info_queue, center)
        return {vars = {number_format(landa_mod()), Jen.sinister and '' or Jen.gods() and 'That... thing...' or 'I must do what I must-...', Jen.sinister and '' or Jen.gods() and '...have I seen it before?' or '...-w-wait, was that REALLY my line?', Jen.sinister and 'OH GOD, OH NO, OH FU-!!' or ''}}
    end,
    calculate = function(self, card, context)
		if context.cardarea == G.jokers and context.joker_main then
			local mod = landa_mod()
			return {
				message = '^' .. mod .. ' Chips & Mult',
				Echip_mod = mod,
				Emult_mod = mod,
				colour = G.C.PURPLE,
				card = card
			}, true
		end
	end
}'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''	calculate = function(self, card, context)
        if context.retrigger_joker_check and not context.retrigger_joker and context.other_card ~= self then
			local retrigger_amount = 0
			for i = 1, #G.jokers.cards do
				if context.other_card == G.jokers.cards[i] then
					retrigger_amount = i
				end
			end
			if context.other_card == G.jokers.cards[retrigger_amount] then
				return {
					message = localize('k_again_ex'),
					repetitions = retrigger_amount,
					card = card
				}
			else
				return nil, true
			end
        end
	end'''
position = "at"
payload = '''	calculate = function(self, card, context)
        if context.retrigger_joker_check and not context.retrigger_joker and context.other_card ~= self then
			local retrigger_amount = to_big(0)
			for i = 1, #G.jokers.cards do
				if context.other_card == G.jokers.cards[i] then
					retrigger_amount = i
				end
			end
			if context.other_card == G.jokers.cards[retrigger_amount] then
				return {
					message = localize('k_again_ex'),
					repetitions = retrigger_amount,
					card = card
				}
			else
				return nil, true
			end
        end
	end'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''SMODS.Joker {
	key = 'haro',
	loc_txt = {
		name = 'Haro',
		text = {
			'{C:tarot}Tarots {C:planet}level up',
			'{C:attention}all hands{} when used or sold',
			'{X:green,C:white}Synergy:{} {X:dark_edition,C:red}^#1#{C:red} Mult{} if',
			'you have {X:attention,C:black}Suzaku',
			' ',
			caption('#2#'),
			caption('#3#'),
			faceart('raidoesthings'),
			origin('Cult of the Lamb'),
			au('Prophecy of the Broken Crowns')
		}
	},
	pos = { x = 0, y = 0 },
	soul_pos = { x = 1, y = 0 },
	config = {extra = {synergy_mult = 1.65}},
	cost = 15,
	rarity = 'cry_epic',
	unlocked = true,
	discovered = true,
	blueprint_compat = true,
	eternal_compat = true,
	perishable_compat = false,
	atlas = 'jenharo',
	in_pool = function()
		return #SMODS.find_card('j_jen_godfather') <= 0
	end,
    loc_vars = function(self, info_queue, center)
        return {vars = {center.ability.extra.synergy_mult, Jen.gods() and 'Make it stop! MAKE IT STOP!' or Jen.sinister and 'What kind of tales do you tell?!' or 'I live to tell tales,', Jen.gods() and 'I CAN\'T TAKE IIIIIT!' or Jen.sinister and 'This is just pure psychopathy!!' or 'both of old and of new.'}}
    end,
	calculate = function(self, card, context)
		if context.using_consumeable and context.consumeable and context.consumeable.ability.set == 'Tarot' then
			local quota = (context.consumeable:getEvalQty())
			card.cumulative_lvs = (card.cumulative_lvs or 0) + quota
			if jl.njr(context) then
				card:speak(haro_blurbs, G.C.SECONDARY_SET.Tarot)
				card:apply_cumulative_levels()
			end
			return nil, true
		elseif context.selling_card and not context.selling_self and context.card.ability.set == 'Tarot' then
			local quota = (context.card:getEvalQty())
			card.cumulative_lvs = (card.cumulative_lvs or 0) + quota
			if jl.njr(context) then
				card:speak(haro_blurbs, G.C.SECONDARY_SET.Tarot)
				card:apply_cumulative_levels()
			end
			return nil, true
		end
		if #SMODS.find_card('j_jen_suzaku') > 0 then
			if context.cardarea == G.jokers and not context.before and not context.after then
				return {
					message = 'Either with a sword, or a bullet! (^' .. card.ability.extra.synergy_mult .. ' Mult)',
					Emult_mod = card.ability.extra.synergy_mult,
					colour = G.C.DARK_EDITION
				}, true
			end
		end
	end
}'''
position = 'at'
payload = '''SMODS.Joker {
	key = 'haro',
	loc_txt = {
		name = 'Haro',
		text = {
			'{C:tarot}Tarots {C:planet}level up',
			'{C:attention}all hands{} when used or sold',
			'{X:green,C:white}Synergy:{} {X:dark_edition,C:red}^#1#{C:red} Mult{} if',
			'you have {X:attention,C:black}Suzaku',
			' ',
			caption('#2#'),
			caption('#3#'),
			faceart('raidoesthings'),
			origin('Cult of the Lamb'),
			au('Prophecy of the Broken Crowns')
		}
	},
	pos = { x = 0, y = 0 },
	soul_pos = { x = 1, y = 0 },
	config = {extra = {synergy_mult = 1.65}},
	cost = 15,
	rarity = 'cry_epic',
	unlocked = true,
	discovered = true,
	blueprint_compat = true,
	eternal_compat = true,
	perishable_compat = false,
	atlas = 'jenharo',
	in_pool = function()
		return #SMODS.find_card('j_jen_godfather') <= 0
	end,
    loc_vars = function(self, info_queue, center)
        return {vars = {center.ability.extra.synergy_mult, Jen.gods() and 'Make it stop! MAKE IT STOP!' or Jen.sinister and 'What kind of tales do you tell?!' or 'I live to tell tales,', Jen.gods() and 'I CAN\'T TAKE IIIIIT!' or Jen.sinister and 'This is just pure psychopathy!!' or 'both of old and of new.'}}
    end,
	calculate = function(self, card, context)
		if context.using_consumeable and context.consumeable and context.consumeable.ability.set == 'Tarot' then
			local quota = (context.consumeable:getEvalQty())
			card.cumulative_lvs = (card.cumulative_lvs or 0) + quota
			if jl.njr(context) then
				card:speak(haro_blurbs, G.C.SECONDARY_SET.Tarot)
				card:apply_cumulative_levels()
			end
			return nil, true
		elseif context.selling_card and not context.selling_self and context.card.ability.set == 'Tarot' then
			local quota = (context.card:getEvalQty())
			card.cumulative_lvs = (card.cumulative_lvs or 0) + quota
			if jl.njr(context) then
				card:speak(haro_blurbs, G.C.SECONDARY_SET.Tarot)
				card:apply_cumulative_levels()
			end
			return nil, true
		end
		if #SMODS.find_card('j_jen_suzaku') > 0 then
			if context.cardarea == G.jokers and context.joker_main then
				return {
					message = 'Either with a sword, or a bullet! (^' .. card.ability.extra.synergy_mult .. ' Mult)',
					Emult_mod = card.ability.extra.synergy_mult,
					colour = G.C.DARK_EDITION
				}, true
			end
		end
	end
}'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''SMODS.Joker {
	key = 'suzaku',
	loc_txt = {
		name = 'Suzaku',
		text = {
			'{C:spectral}Spectrals {C:planet}level up',
			'{C:attention}all hands{} when used or sold',
			'{X:green,C:white}Synergy:{} {X:dark_edition,C:red}^#1#{C:red} Mult{} if',
			'you have {X:attention,C:black}Haro',
			' ',
			caption('#2#'),
			caption('#3#'),
			faceart('raidoesthings')
		}
	},
	pos = { x = 0, y = 0 },
	soul_pos = { x = 1, y = 0 },
	config = {extra = {synergy_mult = 1.65}},
	cost = 15,
	rarity = 'cry_epic',
	unlocked = true,
	discovered = true,
	blueprint_compat = true,
	eternal_compat = true,
	perishable_compat = false,
	atlas = 'jensuzaku',
	in_pool = function()
		return #SMODS.find_card('j_jen_godmother') <= 0
	end,
    loc_vars = function(self, info_queue, center)
        return {vars = {center.ability.extra.synergy_mult, Jen.gods() and 'GGHHAAAAAAAHHHHHHHHhhh-!!' or Jen.sinister and 'What kind of firepower is this?!' or 'You gotta finish the job fast', Jen.gods() and '' or Jen.sinister and 'My blunderbuss can\'t even compete!' or 'sometimes, and you have me to help!'}}
    end,
	calculate = function(self, card, context)
		if context.using_consumeable and context.consumeable and context.consumeable.ability.set == 'Spectral' then
			local quota = (context.consumeable:getEvalQty())
			card.cumulative_lvs = (card.cumulative_lvs or 0) + quota
			if jl.njr(context) then
				card:speak(suzaku_blurbs, G.C.SECONDARY_SET.Spectral)
				card:apply_cumulative_levels()
			end
			return nil, true
		elseif context.selling_card and not context.selling_self and context.card.ability.set == 'Spectral' then
			local quota = (context.card:getEvalQty())
			card.cumulative_lvs = (card.cumulative_lvs or 0) + quota
			if jl.njr(context) then
				card:speak(suzaku_blurbs, G.C.SECONDARY_SET.Spectral)
				card:apply_cumulative_levels()
			end
			return nil, true
		end
		if #SMODS.find_card('j_jen_haro') > 0 then
			if context.cardarea == G.jokers and not context.before and not context.after then
				return {
					message = 'All it takes is one chance. (^' .. card.ability.extra.synergy_mult .. ' Mult)',
					Emult_mod = card.ability.extra.synergy_mult,
					colour = G.C.DARK_EDITION
				}, true
			end
		end
	end
}'''
position = 'at'
payload = '''SMODS.Joker {
	key = 'suzaku',
	loc_txt = {
		name = 'Suzaku',
		text = {
			'{C:spectral}Spectrals {C:planet}level up',
			'{C:attention}all hands{} when used or sold',
			'{X:green,C:white}Synergy:{} {X:dark_edition,C:red}^#1#{C:red} Mult{} if',
			'you have {X:attention,C:black}Haro',
			' ',
			caption('#2#'),
			caption('#3#'),
			faceart('raidoesthings')
		}
	},
	pos = { x = 0, y = 0 },
	soul_pos = { x = 1, y = 0 },
	config = {extra = {synergy_mult = 1.65}},
	cost = 15,
	rarity = 'cry_epic',
	unlocked = true,
	discovered = true,
	blueprint_compat = true,
	eternal_compat = true,
	perishable_compat = false,
	atlas = 'jensuzaku',
	in_pool = function()
		return #SMODS.find_card('j_jen_godmother') <= 0
	end,
    loc_vars = function(self, info_queue, center)
        return {vars = {center.ability.extra.synergy_mult, Jen.gods() and 'GGHHAAAAAAAHHHHHHHHhhh-!!' or Jen.sinister and 'What kind of firepower is this?!' or 'You gotta finish the job fast', Jen.gods() and '' or Jen.sinister and 'My blunderbuss can\'t even compete!' or 'sometimes, and you have me to help!'}}
    end,
	calculate = function(self, card, context)
		if context.using_consumeable and context.consumeable and context.consumeable.ability.set == 'Spectral' then
			local quota = (context.consumeable:getEvalQty())
			card.cumulative_lvs = (card.cumulative_lvs or 0) + quota
			if jl.njr(context) then
				card:speak(suzaku_blurbs, G.C.SECONDARY_SET.Spectral)
				card:apply_cumulative_levels()
			end
			return nil, true
		elseif context.selling_card and not context.selling_self and context.card.ability.set == 'Spectral' then
			local quota = (context.card:getEvalQty())
			card.cumulative_lvs = (card.cumulative_lvs or 0) + quota
			if jl.njr(context) then
				card:speak(suzaku_blurbs, G.C.SECONDARY_SET.Spectral)
				card:apply_cumulative_levels()
			end
			return nil, true
		end
		if #SMODS.find_card('j_jen_haro') > 0 then
			if context.cardarea == G.jokers and context.joker_main then
				return {
					message = 'All it takes is one chance. (^' .. card.ability.extra.synergy_mult .. ' Mult)',
					Emult_mod = card.ability.extra.synergy_mult,
					colour = G.C.DARK_EDITION
				}, true
			end
		end
	end
}'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''SMODS.Joker {
		key = 'faceless',
		loc_txt = {
			name = 'The {C:cry_ascendant}Faceless{} Tyrant',
			text = {
				'{C:attention}All playing cards{} contribute to scoring',
				'Cards in played hand that are already scoring will {C:attention}score twice',
				'{C:inactive}(Order : Scoring hand > Hand cards > Deck cards > Played hand)',
				' ',
				caption('#1#'),
				faceart('CrimboJimbo')
			}
		},
		config = {off_op = 0},
		pos = { x = 0, y = 0 },
		soul_pos = { x = 1, y = 0, extra = { x = 2, y = 0 }},
		cost = 250,
		misc_badge = {
			colour = G.C.CRY_ASCENDANT,
			text_colour = G.C.EDITION,
			text = {
				'Ko-Fi Juggernaut',
				'CrimboJimbo',
				'£600+ Donated'
			}
		},
		rarity = 'jen_ritualistic',
		unlocked = true,
		discovered = true,
		no_doe = true,
		blueprint_compat = true,
		eternal_compat = true,
		perishable_compat = false,
		immutable = true,
		unique = true,
		debuff_immune = true,
		atlas = 'jenfaceless',
		loc_vars = function(self, info_queue, center)
			return {vars = {crimbo_quotes.fuse[math.random(#crimbo_quotes.fuse)]}}
		end
	}'''
position = 'at'
payload = '''SMODS.Joker {
		key = 'faceless',
		loc_txt = {
			name = 'The {C:cry_ascendant}Faceless{} Tyrant',
			text = {
				'{C:attention}All playing cards{} contribute to scoring',
				'Cards in played hand that are already scoring will {C:attention}score twice',
				'{C:inactive}(Order : Scoring hand > Hand cards > Deck cards > Played hand)',
				' ',
				caption('#1#'),
				faceart('CrimboJimbo')
			}
		},
		config = {off_op = 0},
		pos = { x = 0, y = 0 },
		soul_pos = { x = 1, y = 0, extra = { x = 2, y = 0 }},
		cost = 250,
		misc_badge = {
			colour = G.C.CRY_ASCENDANT,
			text_colour = G.C.EDITION,
			text = {
				'Ko-Fi Juggernaut',
				'CrimboJimbo',
				'£600+ Donated'
			}
		},
		rarity = 'jen_ritualistic',
		unlocked = true,
		discovered = true,
		no_doe = true,
		blueprint_compat = true,
		eternal_compat = true,
		perishable_compat = false,
		immutable = true,
		unique = true,
		debuff_immune = true,
		atlas = 'jenfaceless',
		loc_vars = function(self, info_queue, center)
			return {vars = {crimbo_quotes.fuse[math.random(#crimbo_quotes.fuse)]}}
		end,
		calculate = function(self, card, context)
			if not context.retrigger_joker_check and not context.retrigger_joker then
		end
end,
	}'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''SMODS.Joker {
	key = 'crimbo',
	loc_txt = {
		name = '{C:jen_RGB}Crimbo',
		text = {
			'All cards currently in hand',
			'{C:attention}also contribute to scoring',
			'{C:inactive,s:0.8}(Cards in played hand score in order first, then hand cards in order)',
			' ',
			'{C:inactive,E:1}#1#',
			faceart('CrimboJimbo')
		}
	},
	pos = { x = 0, y = 0 },
	soul_pos = { x = 1, y = 0 },
	cost = 20,
	rarity = 4,
	fusable = true,
	misc_badge = {
		colour = G.C.CRY_ASCENDANT,
		text_colour = G.C.EDITION,
		text = {
			'Ko-Fi Juggernaut',
			'CrimboJimbo',
			'£600+ Donated'
		}
	},
	unique = true,
	unlocked = true,
	discovered = true,
	blueprint_compat = false,
	eternal_compat = true,
	perishable_compat = false,
	immutable = true,
	wee_incompatible = true,
	atlas = 'jencrimbo',
    loc_vars = function(self, info_queue, center)
        return {vars = {Jen.gods() and crimbo_quotes.gods[math.random(#crimbo_quotes.gods)] or crimbo_quotes.normal[math.random(#crimbo_quotes.normal)]}}
    end,
}'''
position = 'at'
payload = '''SMODS.Joker {
	key = 'crimbo',
	loc_txt = {
		name = '{C:jen_RGB}Crimbo',
		text = {
			'All cards currently in hand',
			'{C:attention}also contribute to scoring',
			'{C:inactive,s:0.8}(Cards in played hand score in order first, then hand cards in order)',
			' ',
			'{C:inactive,E:1}#1#',
			faceart('CrimboJimbo')
		}
	},
	pos = { x = 0, y = 0 },
	soul_pos = { x = 1, y = 0 },
	cost = 20,
	rarity = 4,
	fusable = true,
	misc_badge = {
		colour = G.C.CRY_ASCENDANT,
		text_colour = G.C.EDITION,
		text = {
			'Ko-Fi Juggernaut',
			'CrimboJimbo',
			'£600+ Donated'
		}
	},
	unique = true,
	unlocked = true,
	discovered = true,
	blueprint_compat = false,
	eternal_compat = true,
	perishable_compat = false,
	immutable = true,
	wee_incompatible = true,
	atlas = 'jencrimbo',
    loc_vars = function(self, info_queue, center)
        return {vars = {Jen.gods() and crimbo_quotes.gods[math.random(#crimbo_quotes.gods)] or crimbo_quotes.normal[math.random(#crimbo_quotes.normal)]}}
    end,
	calculate = function(self, card, context)
		if not context.retrigger_joker_check and not context.retrigger_joker then
	end
}'''
match_indent = true